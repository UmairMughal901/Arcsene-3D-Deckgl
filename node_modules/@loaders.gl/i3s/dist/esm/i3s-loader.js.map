{"version":3,"sources":["../../src/i3s-loader.ts"],"names":["load","parse","I3SContentLoader","normalizeTileData","normalizeTilesetData","VERSION","TILESET_REGEX","TILE_HEADER_REGEX","SLPK_HEX","I3SLoader","name","id","module","version","mimeTypes","parseI3S","extensions","options","i3s","loadContent","token","isTileset","isTileHeader","tile","tileset","useDracoGeometry","useCompressedTextures","data","context","url","magicNumber","getMagicNumber","Error","test","parseTileset","parseTile","contentUrl","parseTileContent","arrayBuffer","tilesetJson","JSON","TextDecoder","decode","loader","ArrayBuffer","Uint8Array","map","value","toString","padStart","join"],"mappings":"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","sourcesContent":["import type {LoaderWithParser} from '@loaders.gl/loader-utils';\nimport {load, parse} from '@loaders.gl/core';\nimport {I3SContentLoader} from './i3s-content-loader';\nimport {normalizeTileData, normalizeTilesetData} from './lib/parsers/parse-i3s';\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nconst TILESET_REGEX = /layers\\/[0-9]+$/;\nconst TILE_HEADER_REGEX = /nodes\\/([0-9-]+|root)$/;\nconst SLPK_HEX = '504b0304';\n\n/**\n * Loader for I3S - Indexed 3D Scene Layer\n */\nexport const I3SLoader: LoaderWithParser = {\n  name: 'I3S (Indexed Scene Layers)',\n  id: 'i3s',\n  module: 'i3s',\n  version: VERSION,\n  mimeTypes: ['application/octet-stream'],\n  parse: parseI3S,\n  extensions: ['bin'],\n  options: {\n    i3s: {\n      loadContent: true,\n      token: null,\n      isTileset: 'auto',\n      isTileHeader: 'auto',\n      tile: null,\n      tileset: null,\n      useDracoGeometry: true,\n      useCompressedTextures: true\n    }\n  }\n};\n\nasync function parseI3S(data, options, context) {\n  const url = context.url;\n  options.i3s = options.i3s || {};\n  const magicNumber = getMagicNumber(data);\n\n  // check if file is slpk\n  if (magicNumber === SLPK_HEX) {\n    throw new Error('Files with .slpk extention currently are not supported by I3SLoader');\n  }\n\n  // auto detect file type based on url\n  let isTileset;\n  if (options.i3s.isTileset === 'auto') {\n    isTileset = TILESET_REGEX.test(url);\n  } else {\n    isTileset = options.i3s.isTileset;\n  }\n\n  let isTileHeader;\n  if (options.isTileHeader === 'auto') {\n    isTileHeader = TILE_HEADER_REGEX.test(url);\n  } else {\n    isTileHeader = options.i3s.isTileHeader;\n  }\n\n  if (isTileset) {\n    data = await parseTileset(data, options, context);\n  } else if (isTileHeader) {\n    data = await parseTile(data, options, context);\n    if (options.i3s.loadContent) {\n      options.i3s.tile = data;\n      await load(data.contentUrl, I3SLoader, options);\n    }\n  } else {\n    data = await parseTileContent(data, options);\n  }\n\n  return data;\n}\n\nasync function parseTileContent(arrayBuffer, options) {\n  return await parse(arrayBuffer, I3SContentLoader, options);\n}\n\nasync function parseTileset(data, options, context) {\n  const tilesetJson = JSON.parse(new TextDecoder().decode(data));\n  // eslint-disable-next-line no-use-before-define\n  tilesetJson.loader = I3SLoader;\n  await normalizeTilesetData(tilesetJson, options, context);\n\n  return tilesetJson;\n}\n\nasync function parseTile(data, options, context) {\n  data = JSON.parse(new TextDecoder().decode(data));\n  return normalizeTileData(data, options, context);\n}\n\nfunction getMagicNumber(data) {\n  if (data instanceof ArrayBuffer) {\n    // slice binary data (4 bytes from the beginning) and transform it to hexadecimal numeral system\n    return [...new Uint8Array(data, 0, 4)]\n      .map((value) => value.toString(16).padStart(2, '0'))\n      .join('');\n  }\n  return null;\n}\n"],"file":"i3s-loader.js"}