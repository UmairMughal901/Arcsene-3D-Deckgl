{"version":3,"sources":["../../../../src/lib/helpers/i3s-nodepages-tiles.ts"],"names":["load","getSupportedGPUTextureFormats","I3SNodePageLoader","normalizeTileNonUrlData","getUrlWithToken","generateTilesetAttributeUrls","I3SNodePagesTiles","constructor","tileset","options","nodesPerPage","nodePages","lodSelectionMetricType","textureDefinitionsSelectedFormats","_initSelectedFormatsForTextureDefinitions","getNodeById","id","pageIndex","Math","floor","nodePageUrl","url","i3s","token","Promise","nodeIndex","nodes","formTileFromNodePages","node","children","child","childNode","push","obb","contentUrl","textureUrl","materialDefinition","textureFormat","attributeUrls","isDracoGeometry","mesh","isDracoGeometryResult","geometry","_getContentUrl","textureData","nodeMaterialDefinition","_getInformationFromMaterial","material","format","name","resource","attributeStorageInfo","attribute","lodSelection","_getLodSelection","meshGeometryData","result","geometryDefinition","geometryDefinitions","definition","geometryIndex","useDracoGeometry","geometryBuffers","findIndex","buffer","compressedAttributes","encoding","Boolean","metricType","maxError","sqrt","lodThreshold","PI","textureDataDefault","materialDefinitions","textureSetDefinitionIndex","pbrMetallicRoughness","baseColorTexture","textureSetDefinitionId","possibleI3sFormats","_getSupportedTextureFormats","textureSetDefinitions","textureSetDefinition","formats","selectedFormat","i3sFormat","find","value","useCompressedTextures","supportedCompressedFormats","has"],"mappings":";AAAA,SAAQA,IAAR,QAAmB,kBAAnB;AACA,SAAQC,6BAAR,QAA4C,sBAA5C;AAEA,SAAQC,iBAAR,QAAgC,4BAAhC;AACA,SAAQC,uBAAR,QAAsC,sBAAtC;AACA,SAAQC,eAAR,EAAyBC,4BAAzB,QAA4D,oBAA5D;AAKA,eAAe,MAAMC,iBAAN,CAAwB;AAcrCC,EAAAA,WAAW,CAACC,OAAD,EAAmBC,OAAnB,EAAoC;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAC7C,SAAKD,OAAL,GAAe,EAAC,GAAGA;AAAJ,KAAf;AACA,SAAKE,YAAL,GAAoBF,OAAO,CAACG,SAAR,CAAkBD,YAAtC;AACA,SAAKE,sBAAL,GAA8BJ,OAAO,CAACG,SAAR,CAAkBC,sBAAhD;AACA,SAAKH,OAAL,GAAeA,OAAf;AACA,SAAKE,SAAL,GAAiB,EAAjB;AACA,SAAKE,iCAAL,GAAyC,EAAzC;;AAEA,SAAKC,yCAAL,CAA+CN,OAA/C;AACD;;AAMgB,QAAXO,WAAW,CAACC,EAAD,EAAa;AAC5B,UAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWH,EAAE,GAAG,KAAKN,YAArB,CAAlB;;AACA,QAAI,CAAC,KAAKC,SAAL,CAAeM,SAAf,CAAL,EAAgC;AAAA;;AAC9B,YAAMG,WAAW,GAAGhB,eAAe,CAChC,GAAE,KAAKI,OAAL,CAAaa,GAAI,cAAaJ,SAAU,EADV,uBAEjC,KAAKR,OAAL,CAAaa,GAFoB,sDAEjC,kBAAkBC,KAFe,CAAnC;AAIA,WAAKZ,SAAL,CAAeM,SAAf,IAA4BjB,IAAI,CAACoB,WAAD,EAAclB,iBAAd,EAAiC,KAAKO,OAAtC,CAAhC;AACA,WAAKE,SAAL,CAAeM,SAAf,IAA4B,MAAM,KAAKN,SAAL,CAAeM,SAAf,CAAlC;AACD;;AACD,QAAI,KAAKN,SAAL,CAAeM,SAAf,aAAqCO,OAAzC,EAAkD;AAChD,WAAKb,SAAL,CAAeM,SAAf,IAA4B,MAAM,KAAKN,SAAL,CAAeM,SAAf,CAAlC;AACD;;AACD,UAAMQ,SAAS,GAAGT,EAAE,GAAG,KAAKN,YAA5B;AACA,WAAO,KAAKC,SAAL,CAAeM,SAAf,EAA0BS,KAA1B,CAAgCD,SAAhC,CAAP;AACD;;AAO0B,QAArBE,qBAAqB,CAACX,EAAD,EAAa;AACtC,UAAMY,IAAI,GAAG,MAAM,KAAKb,WAAL,CAAiBC,EAAjB,CAAnB;AACA,UAAMa,QAAe,GAAG,EAAxB;;AACA,SAAK,MAAMC,KAAX,IAAoBF,IAAI,CAACC,QAAL,IAAiB,EAArC,EAAyC;AACvC,YAAME,SAAS,GAAG,MAAM,KAAKhB,WAAL,CAAiBe,KAAjB,CAAxB;AACAD,MAAAA,QAAQ,CAACG,IAAT,CAAc;AACZhB,QAAAA,EAAE,EAAEc,KADQ;AAEZG,QAAAA,GAAG,EAAEF,SAAS,CAACE;AAFH,OAAd;AAID;;AAED,QAAIC,UAAU,GAAG,IAAjB;AACA,QAAIC,UAAyB,GAAG,IAAhC;AACA,QAAIC,kBAAkB,GAAG,IAAzB;AACA,QAAIC,aAAa,GAAG,MAApB;AACA,QAAIC,aAAuB,GAAG,EAA9B;AACA,QAAIC,eAAe,GAAG,KAAtB;;AAEA,QAAIX,IAAI,IAAIA,IAAI,CAACY,IAAjB,EAAuB;AAErB,YAAM;AAACnB,QAAAA,GAAD;AAAMkB,QAAAA,eAAe,EAAEE;AAAvB,UAAiDb,IAAI,CAACY,IAAL,CAAUE,QAAV,IACrD,KAAKC,cAAL,CAAoBf,IAAI,CAACY,IAAL,CAAUE,QAA9B,CADoD,IACR;AAACrB,QAAAA,GAAG,EAAE,IAAN;AAAYkB,QAAAA,eAAe,EAAE;AAA7B,OAD9C;AAEAL,MAAAA,UAAU,GAAGb,GAAb;AACAkB,MAAAA,eAAe,GAAGE,qBAAlB;;AAEA,YAAM,CAACG,WAAD,EAAcC,sBAAd,IAAwC,KAAKC,2BAAL,CAC5ClB,IAAI,CAACY,IAAL,CAAUO,QADkC,CAA9C;;AAGAX,MAAAA,kBAAkB,GAAGS,sBAArB;AACAR,MAAAA,aAAa,GAAGO,WAAW,CAACI,MAAZ,IAAsBX,aAAtC;;AACA,UAAIO,WAAW,CAACK,IAAhB,EAAsB;AACpBd,QAAAA,UAAU,GAAI,GAAE,KAAK3B,OAAL,CAAaa,GAAI,UAASO,IAAI,CAACY,IAAL,CAAUO,QAAV,CAAmBG,QAAS,aAAYN,WAAW,CAACK,IAAK,EAAnG;AACD;;AAED,UAAI,KAAKzC,OAAL,CAAa2C,oBAAjB,EAAuC;AACrCb,QAAAA,aAAa,GAAGjC,4BAA4B,CAAC,KAAKG,OAAN,EAAeoB,IAAI,CAACY,IAAL,CAAUY,SAAV,CAAoBF,QAAnC,CAA5C;AACD;AACF;;AAED,UAAMG,YAAY,GAAG,KAAKC,gBAAL,CAAsB1B,IAAtB,CAArB;;AAEA,WAAOzB,uBAAuB,CAAC;AAC7Ba,MAAAA,EAD6B;AAE7BqC,MAAAA,YAF6B;AAG7BpB,MAAAA,GAAG,EAAEL,IAAI,CAACK,GAHmB;AAI7BC,MAAAA,UAJ6B;AAK7BC,MAAAA,UAL6B;AAM7BG,MAAAA,aAN6B;AAO7BF,MAAAA,kBAP6B;AAQ7BC,MAAAA,aAR6B;AAS7BR,MAAAA,QAT6B;AAU7BU,MAAAA;AAV6B,KAAD,CAA9B;AAYD;;AASDI,EAAAA,cAAc,CAACY,gBAAD,EAAmB;AAC/B,QAAIC,MAAM,GAAG,EAAb;AACA,UAAMC,kBAAkB,GAAG,KAAKjD,OAAL,CAAakD,mBAAb,CAAiCH,gBAAgB,CAACI,UAAlD,CAA3B;AACA,QAAIC,aAAa,GAAG,CAAC,CAArB;;AAEA,QAAI,KAAKnD,OAAL,CAAaa,GAAb,IAAoB,KAAKb,OAAL,CAAaa,GAAb,CAAiBuC,gBAAzC,EAA2D;AACzDD,MAAAA,aAAa,GAAGH,kBAAkB,CAACK,eAAnB,CAAmCC,SAAnC,CACbC,MAAD,IAAYA,MAAM,CAACC,oBAAP,IAA+BD,MAAM,CAACC,oBAAP,CAA4BC,QAA5B,KAAyC,OADtE,CAAhB;AAGD;;AAED,QAAIN,aAAa,KAAK,CAAC,CAAvB,EAA0B;AACxBA,MAAAA,aAAa,GAAGH,kBAAkB,CAACK,eAAnB,CAAmCC,SAAnC,CACbC,MAAD,IAAY,CAACA,MAAM,CAACC,oBADN,CAAhB;AAGD;;AACD,QAAIL,aAAa,KAAK,CAAC,CAAvB,EAA0B;AACxB,YAAMrB,eAAe,GAAG4B,OAAO,CAC7BV,kBAAkB,CAACK,eAAnB,CAAmCF,aAAnC,EAAkDK,oBADrB,CAA/B;AAGAT,MAAAA,MAAM,GAAG;AACPnC,QAAAA,GAAG,EAAG,GAAE,KAAKb,OAAL,CAAaa,GAAI,UAASkC,gBAAgB,CAACL,QAAS,eAAcU,aAAc,EADjF;AAEPrB,QAAAA;AAFO,OAAT;AAID;;AACD,WAAOiB,MAAP;AACD;;AASDF,EAAAA,gBAAgB,CAAC1B,IAAD,EAAiB;AAC/B,UAAMyB,YAAsB,GAAG,EAA/B;;AACA,QAAI,KAAKzC,sBAAL,KAAgC,sBAApC,EAA4D;AAC1DyC,MAAAA,YAAY,CAACrB,IAAb,CAAkB;AAChBoC,QAAAA,UAAU,EAAE,oBADI;AAEhBC,QAAAA,QAAQ,EAAEnD,IAAI,CAACoD,IAAL,CAAU1C,IAAI,CAAC2C,YAAL,IAAqBrD,IAAI,CAACsD,EAAL,GAAU,IAA/B,CAAV;AAFM,OAAlB;AAID;;AACDnB,IAAAA,YAAY,CAACrB,IAAb,CAAkB;AAChBoC,MAAAA,UAAU,EAAE,KAAKxD,sBADD;AAEhByD,MAAAA,QAAQ,EAAEzC,IAAI,CAAC2C;AAFC,KAAlB;AAIA,WAAOlB,YAAP;AACD;;AAUDP,EAAAA,2BAA2B,CAACC,QAAD,EAAW;AACpC,UAAM0B,kBAAkB,GAAG;AAACxB,MAAAA,IAAI,EAAE,IAAP;AAAaD,MAAAA,MAAM,EAAE;AAArB,KAA3B;;AACA,QAAID,QAAJ,EAAc;AACZ,YAAMX,kBAAkB,GAAG,KAAK5B,OAAL,CAAakE,mBAAb,CAAiC3B,QAAQ,CAACY,UAA1C,CAA3B;AACA,YAAMgB,yBAAyB,GAC7BvC,kBAAkB,IAClBA,kBAAkB,CAACwC,oBADnB,IAEAxC,kBAAkB,CAACwC,oBAAnB,CAAwCC,gBAFxC,IAGAzC,kBAAkB,CAACwC,oBAAnB,CAAwCC,gBAAxC,CAAyDC,sBAJ3D;;AAKA,UAAIH,yBAAyB,IAAIA,yBAAyB,KAAK,CAA/D,EAAkE;AAChE,cAAM/B,WAAW,GACf,KAAK/B,iCAAL,CAAuC8D,yBAAvC,KAAqEF,kBADvE;AAEA,eAAO,CAAC7B,WAAD,EAAcR,kBAAd,CAAP;AACD;;AACD,aAAO,CAACqC,kBAAD,EAAqBrC,kBAArB,CAAP;AACD;;AACD,WAAO,CAACqC,kBAAD,EAAqB,IAArB,CAAP;AACD;;AAOD3D,EAAAA,yCAAyC,CAACN,OAAD,EAAU;AACjD,SAAKK,iCAAL,GAAyC,EAAzC;;AACA,UAAMkE,kBAAkB,GAAG,KAAKC,2BAAL,EAA3B;;AACA,UAAMC,qBAAqB,GAAGzE,OAAO,CAACyE,qBAAR,IAAiC,EAA/D;;AACA,SAAK,MAAMC,oBAAX,IAAmCD,qBAAnC,EAA0D;AACxD,YAAME,OAAO,GAAID,oBAAoB,IAAIA,oBAAoB,CAACC,OAA9C,IAA0D,EAA1E;AACA,UAAIC,cAAc,GAAG,IAArB;;AACA,WAAK,MAAMC,SAAX,IAAwBN,kBAAxB,EAA4C;AAC1C,cAAM/B,MAAM,GAAGmC,OAAO,CAACG,IAAR,CAAcC,KAAD,IAAWA,KAAK,CAACvC,MAAN,KAAiBqC,SAAzC,CAAf;;AACA,YAAIrC,MAAJ,EAAY;AACVoC,UAAAA,cAAc,GAAGpC,MAAjB;AACA;AACD;AACF;;AACD,WAAKnC,iCAAL,CAAuCmB,IAAvC,CAA4CoD,cAA5C;AACD;AACF;;AAMDJ,EAAAA,2BAA2B,GAAa;AACtC,UAAMG,OAAiB,GAAG,EAA1B;;AACA,QAAI,CAAC,KAAK1E,OAAL,CAAaa,GAAd,IAAqB,KAAKb,OAAL,CAAaa,GAAb,CAAiBkE,qBAA1C,EAAiE;AAC/D,YAAMC,0BAA0B,GAAGxF,6BAA6B,EAAhE;;AAGA,UAAIwF,0BAA0B,CAACC,GAA3B,CAA+B,MAA/B,CAAJ,EAA4C;AAC1CP,QAAAA,OAAO,CAACnD,IAAR,CAAa,UAAb;AACD;;AACD,UAAIyD,0BAA0B,CAACC,GAA3B,CAA+B,KAA/B,CAAJ,EAA2C;AACzCP,QAAAA,OAAO,CAACnD,IAAR,CAAa,KAAb;AACD;AACF;;AAEDmD,IAAAA,OAAO,CAACnD,IAAR,CAAa,KAAb;AACAmD,IAAAA,OAAO,CAACnD,IAAR,CAAa,KAAb;AACA,WAAOmD,OAAP;AACD;;AA1OoC","sourcesContent":["import {load} from '@loaders.gl/core';\nimport {getSupportedGPUTextureFormats} from '@loaders.gl/textures';\nimport {Tileset, NodePage} from '../../types';\nimport {I3SNodePageLoader} from '../../i3s-node-page-loader';\nimport {normalizeTileNonUrlData} from '../parsers/parse-i3s';\nimport {getUrlWithToken, generateTilesetAttributeUrls} from '../utils/url-utils';\n\n/**\n * class I3SNodePagesTiles - loads nodePages and form i3s tiles from them\n */\nexport default class I3SNodePagesTiles {\n  tileset: Tileset;\n  nodePages: NodePage[];\n  nodesPerPage: number;\n  options: {[key: string]: any};\n  lodSelectionMetricType: any;\n  textureDefinitionsSelectedFormats: any[];\n\n  /**\n   * @constructs\n   * Create a I3SNodePagesTiles instance.\n   * @param tileset - i3s tileset header ('layers/0')\n   * @param options - i3s loader options\n   */\n  constructor(tileset: Tileset, options: object) {\n    this.tileset = {...tileset}; // spread the tileset to avoid circular reference\n    this.nodesPerPage = tileset.nodePages.nodesPerPage;\n    this.lodSelectionMetricType = tileset.nodePages.lodSelectionMetricType;\n    this.options = options;\n    this.nodePages = [];\n    this.textureDefinitionsSelectedFormats = [];\n\n    this._initSelectedFormatsForTextureDefinitions(tileset);\n  }\n\n  /**\n   * Loads some nodePage and return a particular node from it\n   * @param id - id of node through all node pages\n   */\n  async getNodeById(id: number) {\n    const pageIndex = Math.floor(id / this.nodesPerPage);\n    if (!this.nodePages[pageIndex]) {\n      const nodePageUrl = getUrlWithToken(\n        `${this.tileset.url}/nodepages/${pageIndex}`,\n        this.options.i3s?.token\n      );\n      this.nodePages[pageIndex] = load(nodePageUrl, I3SNodePageLoader, this.options);\n      this.nodePages[pageIndex] = await this.nodePages[pageIndex];\n    }\n    if (this.nodePages[pageIndex] instanceof Promise) {\n      this.nodePages[pageIndex] = await this.nodePages[pageIndex];\n    }\n    const nodeIndex = id % this.nodesPerPage;\n    return this.nodePages[pageIndex].nodes[nodeIndex];\n  }\n\n  /**\n   * Forms tile header using node and tileset data\n   * @param id - id of node through all node pages\n   */\n  // eslint-disable-next-line complexity\n  async formTileFromNodePages(id: number) {\n    const node = await this.getNodeById(id);\n    const children: any[] = [];\n    for (const child of node.children || []) {\n      const childNode = await this.getNodeById(child);\n      children.push({\n        id: child,\n        obb: childNode.obb\n      });\n    }\n\n    let contentUrl = null;\n    let textureUrl: string | null = null;\n    let materialDefinition = null;\n    let textureFormat = 'jpeg';\n    let attributeUrls: string[] = [];\n    let isDracoGeometry = false;\n\n    if (node && node.mesh) {\n      // Get geometry resource URL and type (compressed / non-compressed)\n      const {url, isDracoGeometry: isDracoGeometryResult} = (node.mesh.geometry &&\n        this._getContentUrl(node.mesh.geometry)) || {url: null, isDracoGeometry: null};\n      contentUrl = url;\n      isDracoGeometry = isDracoGeometryResult;\n\n      const [textureData, nodeMaterialDefinition] = this._getInformationFromMaterial(\n        node.mesh.material\n      );\n      materialDefinition = nodeMaterialDefinition;\n      textureFormat = textureData.format || textureFormat;\n      if (textureData.name) {\n        textureUrl = `${this.tileset.url}/nodes/${node.mesh.material.resource}/textures/${textureData.name}`;\n      }\n\n      if (this.tileset.attributeStorageInfo) {\n        attributeUrls = generateTilesetAttributeUrls(this.tileset, node.mesh.attribute.resource);\n      }\n    }\n\n    const lodSelection = this._getLodSelection(node);\n\n    return normalizeTileNonUrlData({\n      id,\n      lodSelection,\n      obb: node.obb,\n      contentUrl,\n      textureUrl,\n      attributeUrls,\n      materialDefinition,\n      textureFormat,\n      children,\n      isDracoGeometry\n    });\n  }\n\n  /**\n   * Forms url and type of geometry resource by nodepage's data and `geometryDefinitions` in the tileset\n   * @param {Object} meshGeometryData - data about the node's mesh from the nodepage\n   * @returns {Object} -\n   *   {string} url - url to the geometry resource\n   *   {boolean} isDracoGeometry - whether the geometry resource contain DRACO compressed geometry\n   */\n  _getContentUrl(meshGeometryData) {\n    let result = {};\n    const geometryDefinition = this.tileset.geometryDefinitions[meshGeometryData.definition];\n    let geometryIndex = -1;\n    // Try to find DRACO geometryDefinition of `useDracoGeometry` option is set\n    if (this.options.i3s && this.options.i3s.useDracoGeometry) {\n      geometryIndex = geometryDefinition.geometryBuffers.findIndex(\n        (buffer) => buffer.compressedAttributes && buffer.compressedAttributes.encoding === 'draco'\n      );\n    }\n    // If DRACO geometry is not applicable try to select non-compressed geometry\n    if (geometryIndex === -1) {\n      geometryIndex = geometryDefinition.geometryBuffers.findIndex(\n        (buffer) => !buffer.compressedAttributes\n      );\n    }\n    if (geometryIndex !== -1) {\n      const isDracoGeometry = Boolean(\n        geometryDefinition.geometryBuffers[geometryIndex].compressedAttributes\n      );\n      result = {\n        url: `${this.tileset.url}/nodes/${meshGeometryData.resource}/geometries/${geometryIndex}`,\n        isDracoGeometry\n      };\n    }\n    return result;\n  }\n\n  /**\n   * Forms 1.6 compatible LOD selection object from a nodepage's node data\n   * @param {Object} node - a node from nodepage\n   * @returns {Object[]} - Array of object of following properties:\n   *   {string} metricType - the label of the LOD metric\n   *   {number} maxError - the value of the metric\n   */\n  _getLodSelection(node): object[] {\n    const lodSelection: object[] = [];\n    if (this.lodSelectionMetricType === 'maxScreenThresholdSQ') {\n      lodSelection.push({\n        metricType: 'maxScreenThreshold',\n        maxError: Math.sqrt(node.lodThreshold / (Math.PI * 0.25))\n      });\n    }\n    lodSelection.push({\n      metricType: this.lodSelectionMetricType,\n      maxError: node.lodThreshold\n    });\n    return lodSelection;\n  }\n\n  /**\n   * Returns information about texture and material from `materialDefinitions`\n   * @param {Object} material - material data from nodepage\n   * @returns {Object[]} - Couple [textureData, materialDefinition]\n   * {string} textureData.name - path name of the texture\n   * {string} textureData.format - format of the texture\n   * materialDefinition - PBR-like material definition from `materialDefinitions`\n   */\n  _getInformationFromMaterial(material) {\n    const textureDataDefault = {name: null, format: null};\n    if (material) {\n      const materialDefinition = this.tileset.materialDefinitions[material.definition];\n      const textureSetDefinitionIndex =\n        materialDefinition &&\n        materialDefinition.pbrMetallicRoughness &&\n        materialDefinition.pbrMetallicRoughness.baseColorTexture &&\n        materialDefinition.pbrMetallicRoughness.baseColorTexture.textureSetDefinitionId;\n      if (textureSetDefinitionIndex || textureSetDefinitionIndex === 0) {\n        const textureData =\n          this.textureDefinitionsSelectedFormats[textureSetDefinitionIndex] || textureDataDefault;\n        return [textureData, materialDefinition];\n      }\n      return [textureDataDefault, materialDefinition];\n    }\n    return [textureDataDefault, null];\n  }\n\n  /**\n   * Sets preferable and supported format for each textureDefinition of the tileset\n   * @param {Object} tileset - I3S layer data\n   * @returns {void}\n   */\n  _initSelectedFormatsForTextureDefinitions(tileset) {\n    this.textureDefinitionsSelectedFormats = [];\n    const possibleI3sFormats = this._getSupportedTextureFormats();\n    const textureSetDefinitions = tileset.textureSetDefinitions || [];\n    for (const textureSetDefinition of textureSetDefinitions) {\n      const formats = (textureSetDefinition && textureSetDefinition.formats) || [];\n      let selectedFormat = null;\n      for (const i3sFormat of possibleI3sFormats) {\n        const format = formats.find((value) => value.format === i3sFormat);\n        if (format) {\n          selectedFormat = format;\n          break;\n        }\n      }\n      this.textureDefinitionsSelectedFormats.push(selectedFormat);\n    }\n  }\n\n  /**\n   * Returns the array of supported texture format\n   * @returns list of format strings\n   */\n  _getSupportedTextureFormats(): string[] {\n    const formats: string[] = [];\n    if (!this.options.i3s || this.options.i3s.useCompressedTextures) {\n      const supportedCompressedFormats = getSupportedGPUTextureFormats();\n      // List of possible in i3s formats:\n      // https://github.com/Esri/i3s-spec/blob/master/docs/1.7/textureSetDefinitionFormat.cmn.md\n      if (supportedCompressedFormats.has('etc2')) {\n        formats.push('ktx-etc2');\n      }\n      if (supportedCompressedFormats.has('dxt')) {\n        formats.push('dds');\n      }\n    }\n\n    formats.push('jpg');\n    formats.push('png');\n    return formats;\n  }\n}\n"],"file":"i3s-nodepages-tiles.js"}