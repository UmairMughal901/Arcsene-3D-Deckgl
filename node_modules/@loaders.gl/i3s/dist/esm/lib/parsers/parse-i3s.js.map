{"version":3,"sources":["../../../../src/lib/parsers/parse-i3s.ts"],"names":["OrientedBoundingBox","Ellipsoid","load","TILE_TYPE","TILE_REFINEMENT","TILESET_TYPE","I3SNodePagesTiles","generateTileAttributeUrls","getUrlWithToken","normalizeTileData","tile","options","context","url","featureData","featureUrl","href","geometryData","contentUrl","textureData","textureUrl","attributeData","attributeUrls","normalizeTileNonUrlData","box","obb","WGS84","cartographicToCartesian","center","halfSize","quaternion","undefined","sphere","mbs","slice","fromCenterHalfSizeQuaternion","boundingSphere","getBoundingSphere","radius","boundingVolume","lodMetricType","lodSelection","metricType","lodMetricValue","maxError","transformMatrix","transform","type","MESH","refine","REPLACE","normalizeTilesetData","tileset","nodePages","nodePagesTile","root","formTileFromNodePages","rootNodeUrl","i3s","token","loader","loadContent","isTileHeader","isTileset","basePath","I3S"],"mappings":"AAAA,SAAQA,mBAAR,QAAkC,kBAAlC;AACA,SAAQC,SAAR,QAAwB,qBAAxB;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,SAAQC,SAAR,EAAmBC,eAAnB,EAAoCC,YAApC,QAAuD,mBAAvD;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AACA,SAAQC,yBAAR,EAAmCC,eAAnC,QAAyD,oBAAzD;AAEA,OAAO,SAASC,iBAAT,CAA2BC,IAA3B,EAAiCC,OAAjC,EAA0CC,OAA1C,EAAmD;AACxDF,EAAAA,IAAI,CAACG,GAAL,GAAWD,OAAO,CAACC,GAAnB;;AAEA,MAAIH,IAAI,CAACI,WAAT,EAAsB;AACpBJ,IAAAA,IAAI,CAACK,UAAL,GAAmB,GAAEL,IAAI,CAACG,GAAI,IAAGH,IAAI,CAACI,WAAL,CAAiB,CAAjB,EAAoBE,IAAK,EAA1D;AACD;;AAED,MAAIN,IAAI,CAACO,YAAT,EAAuB;AACrBP,IAAAA,IAAI,CAACQ,UAAL,GAAmB,GAAER,IAAI,CAACG,GAAI,IAAGH,IAAI,CAACO,YAAL,CAAkB,CAAlB,EAAqBD,IAAK,EAA3D;AACD;;AAED,MAAIN,IAAI,CAACS,WAAT,EAAsB;AACpBT,IAAAA,IAAI,CAACU,UAAL,GAAmB,GAAEV,IAAI,CAACG,GAAI,IAAGH,IAAI,CAACS,WAAL,CAAiB,CAAjB,EAAoBH,IAAK,EAA1D;AACD;;AAED,MAAIN,IAAI,CAACW,aAAT,EAAwB;AACtBX,IAAAA,IAAI,CAACY,aAAL,GAAqBf,yBAAyB,CAACG,IAAD,CAA9C;AACD;;AAED,SAAOa,uBAAuB,CAACb,IAAD,CAA9B;AACD;AAED,OAAO,SAASa,uBAAT,CAAiCb,IAAjC,EAAuC;AAC5C,QAAMc,GAAG,GAAGd,IAAI,CAACe,GAAL,GACR,CACA,GAAGxB,SAAS,CAACyB,KAAV,CAAgBC,uBAAhB,CAAwCjB,IAAI,CAACe,GAAL,CAASG,MAAjD,CADH,EAEA,GAAGlB,IAAI,CAACe,GAAL,CAASI,QAFZ,EAGA,GAAGnB,IAAI,CAACe,GAAL,CAASK,UAHZ,CADQ,GAMRC,SANJ;AAOA,MAAIC,MAAJ;;AACA,MAAItB,IAAI,CAACuB,GAAT,EAAc;AACZD,IAAAA,MAAM,GAAG,CACP,GAAG/B,SAAS,CAACyB,KAAV,CAAgBC,uBAAhB,CAAwCjB,IAAI,CAACuB,GAAL,CAASC,KAAT,CAAe,CAAf,EAAkB,CAAlB,CAAxC,CADI,EAEPxB,IAAI,CAACuB,GAAL,CAAS,CAAT,CAFO,CAAT;AAID,GALD,MAKO,IAAIT,GAAJ,EAAS;AACd,UAAMC,GAAG,GAAG,IAAIzB,mBAAJ,GAA0BmC,4BAA1B,CACVX,GAAG,CAACU,KAAJ,CAAU,CAAV,EAAa,CAAb,CADU,EAEVxB,IAAI,CAACe,GAAL,CAASI,QAFC,EAGVnB,IAAI,CAACe,GAAL,CAASK,UAHC,CAAZ;AAKA,UAAMM,cAAc,GAAGX,GAAG,CAACY,iBAAJ,EAAvB;AACAL,IAAAA,MAAM,GAAG,CAAC,GAAGI,cAAc,CAACR,MAAnB,EAA2BQ,cAAc,CAACE,MAA1C,CAAT;AACA5B,IAAAA,IAAI,CAACuB,GAAL,GAAW,CAAC,GAAGvB,IAAI,CAACe,GAAL,CAASG,MAAb,EAAqBQ,cAAc,CAACE,MAApC,CAAX;AACD;;AAED5B,EAAAA,IAAI,CAAC6B,cAAL,GAAsB;AACpBP,IAAAA,MADoB;AAEpBR,IAAAA;AAFoB,GAAtB;AAIAd,EAAAA,IAAI,CAAC8B,aAAL,GAAqB9B,IAAI,CAAC+B,YAAL,CAAkB,CAAlB,EAAqBC,UAA1C;AACAhC,EAAAA,IAAI,CAACiC,cAAL,GAAsBjC,IAAI,CAAC+B,YAAL,CAAkB,CAAlB,EAAqBG,QAA3C;AACAlC,EAAAA,IAAI,CAACmC,eAAL,GAAuBnC,IAAI,CAACoC,SAA5B;AACApC,EAAAA,IAAI,CAACqC,IAAL,GAAY5C,SAAS,CAAC6C,IAAtB;AAEAtC,EAAAA,IAAI,CAACuC,MAAL,GAAc7C,eAAe,CAAC8C,OAA9B;AAEA,SAAOxC,IAAP;AACD;AAED,OAAO,eAAeyC,oBAAf,CAAoCC,OAApC,EAA6CzC,OAA7C,EAAsDC,OAAtD,EAA+D;AACpEwC,EAAAA,OAAO,CAACvC,GAAR,GAAcD,OAAO,CAACC,GAAtB;;AAEA,MAAIuC,OAAO,CAACC,SAAZ,EAAuB;AACrBD,IAAAA,OAAO,CAACE,aAAR,GAAwB,IAAIhD,iBAAJ,CAAsB8C,OAAtB,EAA+BzC,OAA/B,CAAxB;AACAyC,IAAAA,OAAO,CAACG,IAAR,GAAe,MAAMH,OAAO,CAACE,aAAR,CAAsBE,qBAAtB,CAA4C,CAA5C,CAArB;AACD,GAHD,MAGO;AAAA;;AACL,UAAMC,WAAW,GAAGjD,eAAe,CAAE,GAAE4C,OAAO,CAACvC,GAAI,aAAhB,kBAA8BF,OAAO,CAAC+C,GAAtC,iDAA8B,aAAaC,KAA3C,CAAnC;AAEAP,IAAAA,OAAO,CAACG,IAAR,GAAe,MAAMrD,IAAI,CAACuD,WAAD,EAAcL,OAAO,CAACQ,MAAtB,EAA8B;AACrDF,MAAAA,GAAG,EAAE;AAACG,QAAAA,WAAW,EAAE,KAAd;AAAqBC,QAAAA,YAAY,EAAE,IAAnC;AAAyCC,QAAAA,SAAS,EAAE;AAApD;AADgD,KAA9B,CAAzB;AAGD;;AAGDX,EAAAA,OAAO,CAACY,QAAR,GAAmBZ,OAAO,CAACvC,GAA3B;AACAuC,EAAAA,OAAO,CAACL,IAAR,GAAe1C,YAAY,CAAC4D,GAA5B;AAGAb,EAAAA,OAAO,CAACZ,aAAR,GAAwBY,OAAO,CAACG,IAAR,CAAaf,aAArC;AACAY,EAAAA,OAAO,CAACT,cAAR,GAAyBS,OAAO,CAACG,IAAR,CAAaZ,cAAtC;AACD","sourcesContent":["import {OrientedBoundingBox} from '@math.gl/culling';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {load} from '@loaders.gl/core';\nimport {TILE_TYPE, TILE_REFINEMENT, TILESET_TYPE} from '@loaders.gl/tiles';\nimport I3SNodePagesTiles from '../helpers/i3s-nodepages-tiles';\nimport {generateTileAttributeUrls, getUrlWithToken} from '../utils/url-utils';\n\nexport function normalizeTileData(tile, options, context) {\n  tile.url = context.url;\n\n  if (tile.featureData) {\n    tile.featureUrl = `${tile.url}/${tile.featureData[0].href}`;\n  }\n\n  if (tile.geometryData) {\n    tile.contentUrl = `${tile.url}/${tile.geometryData[0].href}`;\n  }\n\n  if (tile.textureData) {\n    tile.textureUrl = `${tile.url}/${tile.textureData[0].href}`;\n  }\n\n  if (tile.attributeData) {\n    tile.attributeUrls = generateTileAttributeUrls(tile);\n  }\n\n  return normalizeTileNonUrlData(tile);\n}\n\nexport function normalizeTileNonUrlData(tile) {\n  const box = tile.obb\n    ? [\n      ...Ellipsoid.WGS84.cartographicToCartesian(tile.obb.center), // cartesian center of box\n      ...tile.obb.halfSize, // halfSize\n      ...tile.obb.quaternion // quaternion\n    ]\n    : undefined;\n  let sphere;\n  if (tile.mbs) {\n    sphere = [\n      ...Ellipsoid.WGS84.cartographicToCartesian(tile.mbs.slice(0, 3)), // cartesian center of sphere\n      tile.mbs[3] // radius of sphere\n    ];\n  } else if (box) {\n    const obb = new OrientedBoundingBox().fromCenterHalfSizeQuaternion(\n      box.slice(0, 3),\n      tile.obb.halfSize,\n      tile.obb.quaternion\n    );\n    const boundingSphere = obb.getBoundingSphere();\n    sphere = [...boundingSphere.center, boundingSphere.radius];\n    tile.mbs = [...tile.obb.center, boundingSphere.radius];\n  }\n\n  tile.boundingVolume = {\n    sphere,\n    box\n  };\n  tile.lodMetricType = tile.lodSelection[0].metricType;\n  tile.lodMetricValue = tile.lodSelection[0].maxError;\n  tile.transformMatrix = tile.transform;\n  tile.type = TILE_TYPE.MESH;\n  // TODO only support replacement for now\n  tile.refine = TILE_REFINEMENT.REPLACE;\n\n  return tile;\n}\n\nexport async function normalizeTilesetData(tileset, options, context) {\n  tileset.url = context.url;\n\n  if (tileset.nodePages) {\n    tileset.nodePagesTile = new I3SNodePagesTiles(tileset, options);\n    tileset.root = await tileset.nodePagesTile.formTileFromNodePages(0);\n  } else {\n    const rootNodeUrl = getUrlWithToken(`${tileset.url}/nodes/root`, options.i3s?.token);\n    // eslint-disable-next-line no-use-before-define\n    tileset.root = await load(rootNodeUrl, tileset.loader, {\n      i3s: {loadContent: false, isTileHeader: true, isTileset: false}\n    });\n  }\n\n  // base path that non-absolute paths in tileset are relative to.\n  tileset.basePath = tileset.url;\n  tileset.type = TILESET_TYPE.I3S;\n\n  // populate from root node\n  tileset.lodMetricType = tileset.root.lodMetricType;\n  tileset.lodMetricValue = tileset.root.lodMetricValue;\n}\n"],"file":"parse-i3s.js"}