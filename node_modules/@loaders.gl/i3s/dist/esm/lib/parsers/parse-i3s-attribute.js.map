{"version":3,"sources":["../../../../src/lib/parsers/parse-i3s-attribute.ts"],"names":["STRING_ATTRIBUTE_TYPE","OBJECT_ID_ATTRIBUTE_TYPE","FLOAT_64_TYPE","parseI3STileAttribute","arrayBuffer","options","attributeName","attributeType","parseAttribute","parseStringsAttribute","parseShortNumberAttribute","parseFloatAttribute","countOffset","Uint32Array","Float64Array","stringsCountOffset","dataOffset","bytesPerStringSize","stringsArray","stringsCount","DataView","getUint32","stringSizes","stringOffset","stringByteSize","textDecoder","TextDecoder","stringAttribute","Uint8Array","push","decode","error","console","message"],"mappings":"AAAA,SAAQA,qBAAR,EAA+BC,wBAA/B,EAAyDC,aAAzD,QAA6E,aAA7E;AAQA,OAAO,eAAeC,qBAAf,CAAqCC,WAArC,EAAkDC,OAAlD,EAA2D;AAChE,QAAM;AAACC,IAAAA,aAAD;AAAgBC,IAAAA;AAAhB,MAAiCF,OAAvC;;AAEA,MAAI,CAACC,aAAL,EAAoB;AAClB,WAAO,EAAP;AACD;;AACD,SAAO;AACL,KAACA,aAAD,GAAiBC,aAAa,GAAGC,cAAc,CAACD,aAAD,EAAgBH,WAAhB,CAAjB,GAAgD;AADzE,GAAP;AAGD;;AAQD,SAASI,cAAT,CAAwBD,aAAxB,EAAuCH,WAAvC,EAAoD;AAClD,UAAQG,aAAR;AACE,SAAKP,qBAAL;AACE,aAAOS,qBAAqB,CAACL,WAAD,CAA5B;;AACF,SAAKH,wBAAL;AACE,aAAOS,yBAAyB,CAACN,WAAD,CAAhC;;AACF,SAAKF,aAAL;AACE,aAAOS,mBAAmB,CAACP,WAAD,CAA1B;;AACF;AACE,aAAOM,yBAAyB,CAACN,WAAD,CAAhC;AARJ;AAUD;;AAQD,SAASM,yBAAT,CAAmCN,WAAnC,EAAgD;AAC9C,QAAMQ,WAAW,GAAG,CAApB;AACA,SAAO,IAAIC,WAAJ,CAAgBT,WAAhB,EAA6BQ,WAA7B,CAAP;AACD;;AAQD,SAASD,mBAAT,CAA6BP,WAA7B,EAA0C;AACxC,QAAMQ,WAAW,GAAG,CAApB;AACA,SAAO,IAAIE,YAAJ,CAAiBV,WAAjB,EAA8BQ,WAA9B,CAAP;AACD;;AAQD,SAASH,qBAAT,CAA+BL,WAA/B,EAAmE;AACjE,QAAMW,kBAAkB,GAAG,CAA3B;AACA,QAAMC,UAAU,GAAG,CAAnB;AACA,QAAMC,kBAAkB,GAAG,CAA3B;AACA,QAAMC,YAAsB,GAAG,EAA/B;;AAEA,MAAI;AAEF,UAAMC,YAAY,GAAG,IAAIC,QAAJ,CACnBhB,WADmB,EAEnBW,kBAFmB,EAGnBE,kBAHmB,EAInBI,SAJmB,CAITN,kBAJS,EAIW,IAJX,CAArB;AAKA,UAAMO,WAAW,GAAG,IAAIT,WAAJ,CAAgBT,WAAhB,EAA6BY,UAA7B,EAAyCG,YAAzC,CAApB;AACA,QAAII,YAAY,GAAGP,UAAU,GAAGG,YAAY,GAAGF,kBAA/C;;AAEA,SAAK,MAAMO,cAAX,IAA6BF,WAA7B,EAA0C;AACxC,YAAMG,WAAW,GAAG,IAAIC,WAAJ,CAAgB,OAAhB,CAApB;AACA,YAAMC,eAAe,GAAG,IAAIC,UAAJ,CAAexB,WAAf,EAA4BmB,YAA5B,EAA0CC,cAA1C,CAAxB;AACAN,MAAAA,YAAY,CAACW,IAAb,CAAkBJ,WAAW,CAACK,MAAZ,CAAmBH,eAAnB,CAAlB;AACAJ,MAAAA,YAAY,IAAIC,cAAhB;AACD;AACF,GAhBD,CAgBE,OAAOO,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,gCAAd,EAAiDA,KAAD,CAAiBE,OAAjE;AACD;;AAED,SAAOf,YAAP;AACD","sourcesContent":["import {STRING_ATTRIBUTE_TYPE, OBJECT_ID_ATTRIBUTE_TYPE, FLOAT_64_TYPE} from './constants';\n\n/**\n * Get particular tile and creates attribute object inside.\n * @param {ArrayBuffer} arrayBuffer\n * @param {Object} options\n * @returns {Promise<object>}\n */\nexport async function parseI3STileAttribute(arrayBuffer, options) {\n  const {attributeName, attributeType} = options;\n\n  if (!attributeName) {\n    return {};\n  }\n  return {\n    [attributeName]: attributeType ? parseAttribute(attributeType, arrayBuffer) : null\n  };\n}\n\n/**\n * Parse attributes based on attribute type.\n * @param {String} attributeType\n * @param {ArrayBuffer} arrayBuffer\n * @returns {any}\n */\nfunction parseAttribute(attributeType, arrayBuffer) {\n  switch (attributeType) {\n    case STRING_ATTRIBUTE_TYPE:\n      return parseStringsAttribute(arrayBuffer);\n    case OBJECT_ID_ATTRIBUTE_TYPE:\n      return parseShortNumberAttribute(arrayBuffer);\n    case FLOAT_64_TYPE:\n      return parseFloatAttribute(arrayBuffer);\n    default:\n      return parseShortNumberAttribute(arrayBuffer);\n  }\n}\n\n/**\n * Parse short number attribute.\n * Short Integer spec - https://github.com/Esri/i3s-spec/blob/master/docs/1.7/attributeStorageInfo.cmn.md\n * @param {ArrayBuffer} arrayBuffer\n * @returns {Uint32Array}\n */\nfunction parseShortNumberAttribute(arrayBuffer) {\n  const countOffset = 4;\n  return new Uint32Array(arrayBuffer, countOffset);\n}\n\n/**\n * Parse float attribute.\n * Double Spec - https://github.com/Esri/i3s-spec/blob/master/docs/1.7/attributeStorageInfo.cmn.md\n * @param {ArrayBuffer} arrayBuffer\n * @returns {Float64Array}\n */\nfunction parseFloatAttribute(arrayBuffer) {\n  const countOffset = 8;\n  return new Float64Array(arrayBuffer, countOffset);\n}\n\n/**\n * Parse string attribute.\n * String spec - https://github.com/Esri/i3s-spec/blob/master/docs/1.7/attributeStorageInfo.cmn.md\n * @param arrayBuffer\n * @returns list of strings\n */\nfunction parseStringsAttribute(arrayBuffer: ArrayBuffer): string[] {\n  const stringsCountOffset = 0;\n  const dataOffset = 8;\n  const bytesPerStringSize = 4;\n  const stringsArray: string[] = [];\n\n  try {\n    // Use DataView to avoid multiple of 4 error on Uint32Array constructor\n    const stringsCount = new DataView(\n      arrayBuffer,\n      stringsCountOffset,\n      bytesPerStringSize\n    ).getUint32(stringsCountOffset, true);\n    const stringSizes = new Uint32Array(arrayBuffer, dataOffset, stringsCount);\n    let stringOffset = dataOffset + stringsCount * bytesPerStringSize;\n\n    for (const stringByteSize of stringSizes) {\n      const textDecoder = new TextDecoder('utf-8');\n      const stringAttribute = new Uint8Array(arrayBuffer, stringOffset, stringByteSize);\n      stringsArray.push(textDecoder.decode(stringAttribute));\n      stringOffset += stringByteSize;\n    }\n  } catch (error) {\n    console.error('Parse string attribute error: ', (error as Error).message); // eslint-disable-line\n  }\n\n  return stringsArray;\n}\n"],"file":"parse-i3s-attribute.js"}