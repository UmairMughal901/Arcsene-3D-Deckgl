{"version":3,"sources":["../../../../src/lib/utils/url-utils.ts"],"names":["getUrlWithToken","url","token","generateTileAttributeUrls","tile","attributeData","attributeUrls","index","length","attributeUrl","href","replace","push","generateTilesetAttributeUrls","tileset","resource","attributeStorageInfo","fileName","key"],"mappings":"AAQA,OAAO,SAASA,eAAT,CAAyBC,GAAzB,EAA8BC,KAAK,GAAG,IAAtC,EAA4C;AACjD,SAAOA,KAAK,GAAI,GAAED,GAAI,UAASC,KAAM,EAAzB,GAA6BD,GAAzC;AACD;AAOD,OAAO,SAASE,yBAAT,CAAmCC,IAAnC,EAAyD;AAC9D,QAAM;AAACH,IAAAA,GAAD;AAAMI,IAAAA;AAAN,MAAuBD,IAA7B;AACA,QAAME,aAAuB,GAAG,EAAhC;;AAEA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,aAAa,CAACG,MAA1C,EAAkDD,KAAK,EAAvD,EAA2D;AACzD,UAAME,YAAY,GAAGJ,aAAa,CAACE,KAAD,CAAb,CAAqBG,IAArB,CAA0BC,OAA1B,CAAkC,IAAlC,EAAwC,EAAxC,CAArB;AACAL,IAAAA,aAAa,CAACM,IAAd,CAAoB,GAAEX,GAAI,IAAGQ,YAAa,EAA1C;AACD;;AAED,SAAOH,aAAP;AACD;AAQD,OAAO,SAASO,4BAAT,CAAsCC,OAAtC,EAA+CC,QAA/C,EAAyD;AAC9D,QAAMT,aAAuB,GAAG,EAAhC;AACA,QAAM;AAACU,IAAAA,oBAAD;AAAuBf,IAAAA;AAAvB,MAA8Ba,OAApC;;AAEA,OAAK,IAAIP,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGS,oBAAoB,CAACR,MAAjD,EAAyDD,KAAK,EAA9D,EAAkE;AAChE,UAAMU,QAAQ,GAAGD,oBAAoB,CAACT,KAAD,CAApB,CAA4BW,GAA7C;AACAZ,IAAAA,aAAa,CAACM,IAAd,CAAoB,GAAEX,GAAI,UAASc,QAAS,eAAcE,QAAS,IAAnE;AACD;;AAED,SAAOX,aAAP;AACD","sourcesContent":["import {Tile} from '../../types';\n\n/**\n * Generates url with token if it is exists.\n * @param {String} url\n * @param {any} token\n * @returns {string}\n */\nexport function getUrlWithToken(url, token = null) {\n  return token ? `${url}?token=${token}` : url;\n}\n\n/**\n * Generates attribute urls for tile.\n * @param tile\n * @returns list of attribute urls\n */\nexport function generateTileAttributeUrls(tile: Tile): string[] {\n  const {url, attributeData} = tile;\n  const attributeUrls: string[] = [];\n\n  for (let index = 0; index < attributeData.length; index++) {\n    const attributeUrl = attributeData[index].href.replace('./', '');\n    attributeUrls.push(`${url}/${attributeUrl}`);\n  }\n\n  return attributeUrls;\n}\n\n/**\n * Generates attribute urls for tileset based on tileset and resource\n * @param {Object} tileset\n * @param {number} resource\n * @returns {Array}\n */\nexport function generateTilesetAttributeUrls(tileset, resource) {\n  const attributeUrls: string[] = [];\n  const {attributeStorageInfo, url} = tileset;\n\n  for (let index = 0; index < attributeStorageInfo.length; index++) {\n    const fileName = attributeStorageInfo[index].key;\n    attributeUrls.push(`${url}/nodes/${resource}/attributes/${fileName}/0`);\n  }\n\n  return attributeUrls;\n}\n"],"file":"url-utils.js"}