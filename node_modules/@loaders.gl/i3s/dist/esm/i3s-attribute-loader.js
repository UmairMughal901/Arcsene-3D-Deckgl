import { load } from '@loaders.gl/core';
import { parseI3STileAttribute } from './lib/parsers/parse-i3s-attribute';
import { getUrlWithToken } from './lib/utils/url-utils';
const VERSION = typeof "3.0.12" !== 'undefined' ? "3.0.12" : 'latest';
const EMPTY_VALUE = '';
const REJECTED_STATUS = 'rejected';
export const I3SAttributeLoader = {
  name: 'I3S Attribute',
  id: 'i3s-attribute',
  module: 'i3s',
  version: VERSION,
  mimeTypes: ['application/binary'],
  parse,
  extensions: ['bin'],
  options: {},
  binary: true
};

async function parse(data, options) {
  data = parseI3STileAttribute(data, options);
  return data;
}

export async function loadFeatureAttributes(tile, featureId, options = {}) {
  const {
    attributeStorageInfo,
    attributeUrls
  } = getAttributesData(tile);

  if (!attributeStorageInfo || !attributeUrls || !featureId) {
    return null;
  }

  let attributes = [];
  const attributeLoadPromises = [];

  for (let index = 0; index < attributeStorageInfo.length; index++) {
    var _options$i3s;

    const url = getUrlWithToken(attributeUrls[index], (_options$i3s = options.i3s) === null || _options$i3s === void 0 ? void 0 : _options$i3s.token);
    const attributeName = attributeStorageInfo[index].name;
    const attributeType = getAttributeValueType(attributeStorageInfo[index]);
    const loadOptions = { ...options,
      attributeName,
      attributeType
    };
    const promise = load(url, I3SAttributeLoader, loadOptions);
    attributeLoadPromises.push(promise);
  }

  try {
    attributes = await Promise.allSettled(attributeLoadPromises);
  } catch (error) {}

  if (!attributes.length) {
    return null;
  }

  return generateAttributesByFeatureId(attributes, attributeStorageInfo, featureId);
}

function getAttributesData(tile) {
  const attributeStorageInfo = tile && tile.tileset && tile.tileset.tileset && tile.tileset.tileset.attributeStorageInfo;
  const attributeUrls = tile && tile.header && tile.header.attributeUrls;
  return {
    attributeStorageInfo,
    attributeUrls
  };
}

function getAttributeValueType(attribute) {
  if (attribute.hasOwnProperty('objectIds')) {
    return 'Oid32';
  } else if (attribute.hasOwnProperty('attributeValues')) {
    return attribute.attributeValues.valueType;
  }

  return '';
}

function generateAttributesByFeatureId(attributes, attributeStorageInfo, featureId) {
  const objectIds = attributes.find(attribute => attribute.value.OBJECTID);

  if (!objectIds) {
    return null;
  }

  const attributeIndex = objectIds.value.OBJECTID.indexOf(featureId);

  if (attributeIndex < 0) {
    return null;
  }

  return getFeatureAttributesByIndex(attributes, attributeIndex, attributeStorageInfo);
}

function getFeatureAttributesByIndex(attributes, featureIdIndex, attributeStorageInfo) {
  const attributesObject = {};

  for (let index = 0; index < attributeStorageInfo.length; index++) {
    const attributeName = attributeStorageInfo[index].name;
    const attribute = getAttributeByIndexAndAttributeName(attributes, index, attributeName);
    attributesObject[attributeName] = formatAttributeValue(attribute, featureIdIndex);
  }

  return attributesObject;
}

function getAttributeByIndexAndAttributeName(attributes, index, attributesName) {
  const attributeObject = attributes[index];

  if (attributeObject.status === REJECTED_STATUS) {
    return null;
  }

  return attributeObject.value[attributesName];
}

function formatAttributeValue(attribute, featureIdIndex) {
  return attribute && attribute[featureIdIndex] ? attribute[featureIdIndex].toString().replace(/\u0000/g, '').trim() : EMPTY_VALUE;
}
//# sourceMappingURL=i3s-attribute-loader.js.map