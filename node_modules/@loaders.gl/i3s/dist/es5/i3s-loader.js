"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.I3SLoader = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _core = require("@loaders.gl/core");

var _i3sContentLoader = require("./i3s-content-loader");

var _parseI3s = require("./lib/parsers/parse-i3s");

var VERSION = typeof "3.0.12" !== 'undefined' ? "3.0.12" : 'latest';
var TILESET_REGEX = /layers\/[0-9]+$/;
var TILE_HEADER_REGEX = /nodes\/([0-9-]+|root)$/;
var SLPK_HEX = '504b0304';
var I3SLoader = {
  name: 'I3S (Indexed Scene Layers)',
  id: 'i3s',
  module: 'i3s',
  version: VERSION,
  mimeTypes: ['application/octet-stream'],
  parse: parseI3S,
  extensions: ['bin'],
  options: {
    i3s: {
      loadContent: true,
      token: null,
      isTileset: 'auto',
      isTileHeader: 'auto',
      tile: null,
      tileset: null,
      useDracoGeometry: true,
      useCompressedTextures: true
    }
  }
};
exports.I3SLoader = I3SLoader;

function parseI3S(_x, _x2, _x3) {
  return _parseI3S.apply(this, arguments);
}

function _parseI3S() {
  _parseI3S = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(data, options, context) {
    var url, magicNumber, isTileset, isTileHeader;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            url = context.url;
            options.i3s = options.i3s || {};
            magicNumber = getMagicNumber(data);

            if (!(magicNumber === SLPK_HEX)) {
              _context.next = 5;
              break;
            }

            throw new Error('Files with .slpk extention currently are not supported by I3SLoader');

          case 5:
            if (options.i3s.isTileset === 'auto') {
              isTileset = TILESET_REGEX.test(url);
            } else {
              isTileset = options.i3s.isTileset;
            }

            if (options.isTileHeader === 'auto') {
              isTileHeader = TILE_HEADER_REGEX.test(url);
            } else {
              isTileHeader = options.i3s.isTileHeader;
            }

            if (!isTileset) {
              _context.next = 13;
              break;
            }

            _context.next = 10;
            return parseTileset(data, options, context);

          case 10:
            data = _context.sent;
            _context.next = 26;
            break;

          case 13:
            if (!isTileHeader) {
              _context.next = 23;
              break;
            }

            _context.next = 16;
            return parseTile(data, options, context);

          case 16:
            data = _context.sent;

            if (!options.i3s.loadContent) {
              _context.next = 21;
              break;
            }

            options.i3s.tile = data;
            _context.next = 21;
            return (0, _core.load)(data.contentUrl, I3SLoader, options);

          case 21:
            _context.next = 26;
            break;

          case 23:
            _context.next = 25;
            return parseTileContent(data, options);

          case 25:
            data = _context.sent;

          case 26:
            return _context.abrupt("return", data);

          case 27:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _parseI3S.apply(this, arguments);
}

function parseTileContent(_x4, _x5) {
  return _parseTileContent.apply(this, arguments);
}

function _parseTileContent() {
  _parseTileContent = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(arrayBuffer, options) {
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return (0, _core.parse)(arrayBuffer, _i3sContentLoader.I3SContentLoader, options);

          case 2:
            return _context2.abrupt("return", _context2.sent);

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _parseTileContent.apply(this, arguments);
}

function parseTileset(_x6, _x7, _x8) {
  return _parseTileset.apply(this, arguments);
}

function _parseTileset() {
  _parseTileset = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3(data, options, context) {
    var tilesetJson;
    return _regenerator.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            tilesetJson = JSON.parse(new TextDecoder().decode(data));
            tilesetJson.loader = I3SLoader;
            _context3.next = 4;
            return (0, _parseI3s.normalizeTilesetData)(tilesetJson, options, context);

          case 4:
            return _context3.abrupt("return", tilesetJson);

          case 5:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _parseTileset.apply(this, arguments);
}

function parseTile(_x9, _x10, _x11) {
  return _parseTile.apply(this, arguments);
}

function _parseTile() {
  _parseTile = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee4(data, options, context) {
    return _regenerator.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            data = JSON.parse(new TextDecoder().decode(data));
            return _context4.abrupt("return", (0, _parseI3s.normalizeTileData)(data, options, context));

          case 2:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _parseTile.apply(this, arguments);
}

function getMagicNumber(data) {
  if (data instanceof ArrayBuffer) {
    return (0, _toConsumableArray2.default)(new Uint8Array(data, 0, 4)).map(function (value) {
      return value.toString(16).padStart(2, '0');
    }).join('');
  }

  return null;
}
//# sourceMappingURL=i3s-loader.js.map