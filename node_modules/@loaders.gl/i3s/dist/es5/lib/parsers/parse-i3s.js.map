{"version":3,"sources":["../../../../src/lib/parsers/parse-i3s.ts"],"names":["normalizeTileData","tile","options","context","url","featureData","featureUrl","href","geometryData","contentUrl","textureData","textureUrl","attributeData","attributeUrls","normalizeTileNonUrlData","box","obb","Ellipsoid","WGS84","cartographicToCartesian","center","halfSize","quaternion","undefined","sphere","mbs","slice","OrientedBoundingBox","fromCenterHalfSizeQuaternion","boundingSphere","getBoundingSphere","radius","boundingVolume","lodMetricType","lodSelection","metricType","lodMetricValue","maxError","transformMatrix","transform","type","TILE_TYPE","MESH","refine","TILE_REFINEMENT","REPLACE","normalizeTilesetData","tileset","nodePages","nodePagesTile","I3SNodePagesTiles","formTileFromNodePages","root","rootNodeUrl","i3s","token","loader","loadContent","isTileHeader","isTileset","basePath","TILESET_TYPE","I3S"],"mappings":"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","sourcesContent":["import {OrientedBoundingBox} from '@math.gl/culling';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {load} from '@loaders.gl/core';\nimport {TILE_TYPE, TILE_REFINEMENT, TILESET_TYPE} from '@loaders.gl/tiles';\nimport I3SNodePagesTiles from '../helpers/i3s-nodepages-tiles';\nimport {generateTileAttributeUrls, getUrlWithToken} from '../utils/url-utils';\n\nexport function normalizeTileData(tile, options, context) {\n  tile.url = context.url;\n\n  if (tile.featureData) {\n    tile.featureUrl = `${tile.url}/${tile.featureData[0].href}`;\n  }\n\n  if (tile.geometryData) {\n    tile.contentUrl = `${tile.url}/${tile.geometryData[0].href}`;\n  }\n\n  if (tile.textureData) {\n    tile.textureUrl = `${tile.url}/${tile.textureData[0].href}`;\n  }\n\n  if (tile.attributeData) {\n    tile.attributeUrls = generateTileAttributeUrls(tile);\n  }\n\n  return normalizeTileNonUrlData(tile);\n}\n\nexport function normalizeTileNonUrlData(tile) {\n  const box = tile.obb\n    ? [\n      ...Ellipsoid.WGS84.cartographicToCartesian(tile.obb.center), // cartesian center of box\n      ...tile.obb.halfSize, // halfSize\n      ...tile.obb.quaternion // quaternion\n    ]\n    : undefined;\n  let sphere;\n  if (tile.mbs) {\n    sphere = [\n      ...Ellipsoid.WGS84.cartographicToCartesian(tile.mbs.slice(0, 3)), // cartesian center of sphere\n      tile.mbs[3] // radius of sphere\n    ];\n  } else if (box) {\n    const obb = new OrientedBoundingBox().fromCenterHalfSizeQuaternion(\n      box.slice(0, 3),\n      tile.obb.halfSize,\n      tile.obb.quaternion\n    );\n    const boundingSphere = obb.getBoundingSphere();\n    sphere = [...boundingSphere.center, boundingSphere.radius];\n    tile.mbs = [...tile.obb.center, boundingSphere.radius];\n  }\n\n  tile.boundingVolume = {\n    sphere,\n    box\n  };\n  tile.lodMetricType = tile.lodSelection[0].metricType;\n  tile.lodMetricValue = tile.lodSelection[0].maxError;\n  tile.transformMatrix = tile.transform;\n  tile.type = TILE_TYPE.MESH;\n  // TODO only support replacement for now\n  tile.refine = TILE_REFINEMENT.REPLACE;\n\n  return tile;\n}\n\nexport async function normalizeTilesetData(tileset, options, context) {\n  tileset.url = context.url;\n\n  if (tileset.nodePages) {\n    tileset.nodePagesTile = new I3SNodePagesTiles(tileset, options);\n    tileset.root = await tileset.nodePagesTile.formTileFromNodePages(0);\n  } else {\n    const rootNodeUrl = getUrlWithToken(`${tileset.url}/nodes/root`, options.i3s?.token);\n    // eslint-disable-next-line no-use-before-define\n    tileset.root = await load(rootNodeUrl, tileset.loader, {\n      i3s: {loadContent: false, isTileHeader: true, isTileset: false}\n    });\n  }\n\n  // base path that non-absolute paths in tileset are relative to.\n  tileset.basePath = tileset.url;\n  tileset.type = TILESET_TYPE.I3S;\n\n  // populate from root node\n  tileset.lodMetricType = tileset.root.lodMetricType;\n  tileset.lodMetricValue = tileset.root.lodMetricValue;\n}\n"],"file":"parse-i3s.js"}