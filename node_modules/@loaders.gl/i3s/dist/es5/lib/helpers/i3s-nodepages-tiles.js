"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _core = require("@loaders.gl/core");

var _textures = require("@loaders.gl/textures");

var _i3sNodePageLoader = require("../../i3s-node-page-loader");

var _parseI3s = require("../parsers/parse-i3s");

var _urlUtils = require("../utils/url-utils");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var I3SNodePagesTiles = function () {
  function I3SNodePagesTiles(tileset, options) {
    (0, _classCallCheck2.default)(this, I3SNodePagesTiles);
    (0, _defineProperty2.default)(this, "tileset", void 0);
    (0, _defineProperty2.default)(this, "nodePages", void 0);
    (0, _defineProperty2.default)(this, "nodesPerPage", void 0);
    (0, _defineProperty2.default)(this, "options", void 0);
    (0, _defineProperty2.default)(this, "lodSelectionMetricType", void 0);
    (0, _defineProperty2.default)(this, "textureDefinitionsSelectedFormats", void 0);
    this.tileset = _objectSpread({}, tileset);
    this.nodesPerPage = tileset.nodePages.nodesPerPage;
    this.lodSelectionMetricType = tileset.nodePages.lodSelectionMetricType;
    this.options = options;
    this.nodePages = [];
    this.textureDefinitionsSelectedFormats = [];

    this._initSelectedFormatsForTextureDefinitions(tileset);
  }

  (0, _createClass2.default)(I3SNodePagesTiles, [{
    key: "getNodeById",
    value: function () {
      var _getNodeById = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee(id) {
        var pageIndex, _this$options$i3s, nodePageUrl, nodeIndex;

        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                pageIndex = Math.floor(id / this.nodesPerPage);

                if (this.nodePages[pageIndex]) {
                  _context.next = 7;
                  break;
                }

                nodePageUrl = (0, _urlUtils.getUrlWithToken)("".concat(this.tileset.url, "/nodepages/").concat(pageIndex), (_this$options$i3s = this.options.i3s) === null || _this$options$i3s === void 0 ? void 0 : _this$options$i3s.token);
                this.nodePages[pageIndex] = (0, _core.load)(nodePageUrl, _i3sNodePageLoader.I3SNodePageLoader, this.options);
                _context.next = 6;
                return this.nodePages[pageIndex];

              case 6:
                this.nodePages[pageIndex] = _context.sent;

              case 7:
                if (!(this.nodePages[pageIndex] instanceof Promise)) {
                  _context.next = 11;
                  break;
                }

                _context.next = 10;
                return this.nodePages[pageIndex];

              case 10:
                this.nodePages[pageIndex] = _context.sent;

              case 11:
                nodeIndex = id % this.nodesPerPage;
                return _context.abrupt("return", this.nodePages[pageIndex].nodes[nodeIndex]);

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getNodeById(_x) {
        return _getNodeById.apply(this, arguments);
      }

      return getNodeById;
    }()
  }, {
    key: "formTileFromNodePages",
    value: function () {
      var _formTileFromNodePages = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2(id) {
        var node, children, _iterator, _step, child, childNode, contentUrl, textureUrl, materialDefinition, textureFormat, attributeUrls, isDracoGeometry, _ref, url, isDracoGeometryResult, _this$_getInformation, _this$_getInformation2, textureData, nodeMaterialDefinition, lodSelection;

        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.getNodeById(id);

              case 2:
                node = _context2.sent;
                children = [];
                _iterator = _createForOfIteratorHelper(node.children || []);
                _context2.prev = 5;

                _iterator.s();

              case 7:
                if ((_step = _iterator.n()).done) {
                  _context2.next = 15;
                  break;
                }

                child = _step.value;
                _context2.next = 11;
                return this.getNodeById(child);

              case 11:
                childNode = _context2.sent;
                children.push({
                  id: child,
                  obb: childNode.obb
                });

              case 13:
                _context2.next = 7;
                break;

              case 15:
                _context2.next = 20;
                break;

              case 17:
                _context2.prev = 17;
                _context2.t0 = _context2["catch"](5);

                _iterator.e(_context2.t0);

              case 20:
                _context2.prev = 20;

                _iterator.f();

                return _context2.finish(20);

              case 23:
                contentUrl = null;
                textureUrl = null;
                materialDefinition = null;
                textureFormat = 'jpeg';
                attributeUrls = [];
                isDracoGeometry = false;

                if (node && node.mesh) {
                  _ref = node.mesh.geometry && this._getContentUrl(node.mesh.geometry) || {
                    url: null,
                    isDracoGeometry: null
                  }, url = _ref.url, isDracoGeometryResult = _ref.isDracoGeometry;
                  contentUrl = url;
                  isDracoGeometry = isDracoGeometryResult;
                  _this$_getInformation = this._getInformationFromMaterial(node.mesh.material), _this$_getInformation2 = (0, _slicedToArray2.default)(_this$_getInformation, 2), textureData = _this$_getInformation2[0], nodeMaterialDefinition = _this$_getInformation2[1];
                  materialDefinition = nodeMaterialDefinition;
                  textureFormat = textureData.format || textureFormat;

                  if (textureData.name) {
                    textureUrl = "".concat(this.tileset.url, "/nodes/").concat(node.mesh.material.resource, "/textures/").concat(textureData.name);
                  }

                  if (this.tileset.attributeStorageInfo) {
                    attributeUrls = (0, _urlUtils.generateTilesetAttributeUrls)(this.tileset, node.mesh.attribute.resource);
                  }
                }

                lodSelection = this._getLodSelection(node);
                return _context2.abrupt("return", (0, _parseI3s.normalizeTileNonUrlData)({
                  id: id,
                  lodSelection: lodSelection,
                  obb: node.obb,
                  contentUrl: contentUrl,
                  textureUrl: textureUrl,
                  attributeUrls: attributeUrls,
                  materialDefinition: materialDefinition,
                  textureFormat: textureFormat,
                  children: children,
                  isDracoGeometry: isDracoGeometry
                }));

              case 32:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[5, 17, 20, 23]]);
      }));

      function formTileFromNodePages(_x2) {
        return _formTileFromNodePages.apply(this, arguments);
      }

      return formTileFromNodePages;
    }()
  }, {
    key: "_getContentUrl",
    value: function _getContentUrl(meshGeometryData) {
      var result = {};
      var geometryDefinition = this.tileset.geometryDefinitions[meshGeometryData.definition];
      var geometryIndex = -1;

      if (this.options.i3s && this.options.i3s.useDracoGeometry) {
        geometryIndex = geometryDefinition.geometryBuffers.findIndex(function (buffer) {
          return buffer.compressedAttributes && buffer.compressedAttributes.encoding === 'draco';
        });
      }

      if (geometryIndex === -1) {
        geometryIndex = geometryDefinition.geometryBuffers.findIndex(function (buffer) {
          return !buffer.compressedAttributes;
        });
      }

      if (geometryIndex !== -1) {
        var isDracoGeometry = Boolean(geometryDefinition.geometryBuffers[geometryIndex].compressedAttributes);
        result = {
          url: "".concat(this.tileset.url, "/nodes/").concat(meshGeometryData.resource, "/geometries/").concat(geometryIndex),
          isDracoGeometry: isDracoGeometry
        };
      }

      return result;
    }
  }, {
    key: "_getLodSelection",
    value: function _getLodSelection(node) {
      var lodSelection = [];

      if (this.lodSelectionMetricType === 'maxScreenThresholdSQ') {
        lodSelection.push({
          metricType: 'maxScreenThreshold',
          maxError: Math.sqrt(node.lodThreshold / (Math.PI * 0.25))
        });
      }

      lodSelection.push({
        metricType: this.lodSelectionMetricType,
        maxError: node.lodThreshold
      });
      return lodSelection;
    }
  }, {
    key: "_getInformationFromMaterial",
    value: function _getInformationFromMaterial(material) {
      var textureDataDefault = {
        name: null,
        format: null
      };

      if (material) {
        var materialDefinition = this.tileset.materialDefinitions[material.definition];
        var textureSetDefinitionIndex = materialDefinition && materialDefinition.pbrMetallicRoughness && materialDefinition.pbrMetallicRoughness.baseColorTexture && materialDefinition.pbrMetallicRoughness.baseColorTexture.textureSetDefinitionId;

        if (textureSetDefinitionIndex || textureSetDefinitionIndex === 0) {
          var textureData = this.textureDefinitionsSelectedFormats[textureSetDefinitionIndex] || textureDataDefault;
          return [textureData, materialDefinition];
        }

        return [textureDataDefault, materialDefinition];
      }

      return [textureDataDefault, null];
    }
  }, {
    key: "_initSelectedFormatsForTextureDefinitions",
    value: function _initSelectedFormatsForTextureDefinitions(tileset) {
      this.textureDefinitionsSelectedFormats = [];

      var possibleI3sFormats = this._getSupportedTextureFormats();

      var textureSetDefinitions = tileset.textureSetDefinitions || [];

      var _iterator2 = _createForOfIteratorHelper(textureSetDefinitions),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var textureSetDefinition = _step2.value;
          var formats = textureSetDefinition && textureSetDefinition.formats || [];
          var selectedFormat = null;

          var _iterator3 = _createForOfIteratorHelper(possibleI3sFormats),
              _step3;

          try {
            var _loop = function _loop() {
              var i3sFormat = _step3.value;
              var format = formats.find(function (value) {
                return value.format === i3sFormat;
              });

              if (format) {
                selectedFormat = format;
                return "break";
              }
            };

            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var _ret = _loop();

              if (_ret === "break") break;
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }

          this.textureDefinitionsSelectedFormats.push(selectedFormat);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }, {
    key: "_getSupportedTextureFormats",
    value: function _getSupportedTextureFormats() {
      var formats = [];

      if (!this.options.i3s || this.options.i3s.useCompressedTextures) {
        var supportedCompressedFormats = (0, _textures.getSupportedGPUTextureFormats)();

        if (supportedCompressedFormats.has('etc2')) {
          formats.push('ktx-etc2');
        }

        if (supportedCompressedFormats.has('dxt')) {
          formats.push('dds');
        }
      }

      formats.push('jpg');
      formats.push('png');
      return formats;
    }
  }]);
  return I3SNodePagesTiles;
}();

exports.default = I3SNodePagesTiles;
//# sourceMappingURL=i3s-nodepages-tiles.js.map