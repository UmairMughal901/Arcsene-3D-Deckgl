{"version":3,"sources":["../../../../src/lib/helpers/i3s-nodepages-tiles.ts"],"names":["I3SNodePagesTiles","tileset","options","nodesPerPage","nodePages","lodSelectionMetricType","textureDefinitionsSelectedFormats","_initSelectedFormatsForTextureDefinitions","id","pageIndex","Math","floor","nodePageUrl","url","i3s","token","I3SNodePageLoader","Promise","nodeIndex","nodes","getNodeById","node","children","child","childNode","push","obb","contentUrl","textureUrl","materialDefinition","textureFormat","attributeUrls","isDracoGeometry","mesh","geometry","_getContentUrl","isDracoGeometryResult","_getInformationFromMaterial","material","textureData","nodeMaterialDefinition","format","name","resource","attributeStorageInfo","attribute","lodSelection","_getLodSelection","meshGeometryData","result","geometryDefinition","geometryDefinitions","definition","geometryIndex","useDracoGeometry","geometryBuffers","findIndex","buffer","compressedAttributes","encoding","Boolean","metricType","maxError","sqrt","lodThreshold","PI","textureDataDefault","materialDefinitions","textureSetDefinitionIndex","pbrMetallicRoughness","baseColorTexture","textureSetDefinitionId","possibleI3sFormats","_getSupportedTextureFormats","textureSetDefinitions","textureSetDefinition","formats","selectedFormat","i3sFormat","find","value","useCompressedTextures","supportedCompressedFormats","has"],"mappings":"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","sourcesContent":["import {load} from '@loaders.gl/core';\nimport {getSupportedGPUTextureFormats} from '@loaders.gl/textures';\nimport {Tileset, NodePage} from '../../types';\nimport {I3SNodePageLoader} from '../../i3s-node-page-loader';\nimport {normalizeTileNonUrlData} from '../parsers/parse-i3s';\nimport {getUrlWithToken, generateTilesetAttributeUrls} from '../utils/url-utils';\n\n/**\n * class I3SNodePagesTiles - loads nodePages and form i3s tiles from them\n */\nexport default class I3SNodePagesTiles {\n  tileset: Tileset;\n  nodePages: NodePage[];\n  nodesPerPage: number;\n  options: {[key: string]: any};\n  lodSelectionMetricType: any;\n  textureDefinitionsSelectedFormats: any[];\n\n  /**\n   * @constructs\n   * Create a I3SNodePagesTiles instance.\n   * @param tileset - i3s tileset header ('layers/0')\n   * @param options - i3s loader options\n   */\n  constructor(tileset: Tileset, options: object) {\n    this.tileset = {...tileset}; // spread the tileset to avoid circular reference\n    this.nodesPerPage = tileset.nodePages.nodesPerPage;\n    this.lodSelectionMetricType = tileset.nodePages.lodSelectionMetricType;\n    this.options = options;\n    this.nodePages = [];\n    this.textureDefinitionsSelectedFormats = [];\n\n    this._initSelectedFormatsForTextureDefinitions(tileset);\n  }\n\n  /**\n   * Loads some nodePage and return a particular node from it\n   * @param id - id of node through all node pages\n   */\n  async getNodeById(id: number) {\n    const pageIndex = Math.floor(id / this.nodesPerPage);\n    if (!this.nodePages[pageIndex]) {\n      const nodePageUrl = getUrlWithToken(\n        `${this.tileset.url}/nodepages/${pageIndex}`,\n        this.options.i3s?.token\n      );\n      this.nodePages[pageIndex] = load(nodePageUrl, I3SNodePageLoader, this.options);\n      this.nodePages[pageIndex] = await this.nodePages[pageIndex];\n    }\n    if (this.nodePages[pageIndex] instanceof Promise) {\n      this.nodePages[pageIndex] = await this.nodePages[pageIndex];\n    }\n    const nodeIndex = id % this.nodesPerPage;\n    return this.nodePages[pageIndex].nodes[nodeIndex];\n  }\n\n  /**\n   * Forms tile header using node and tileset data\n   * @param id - id of node through all node pages\n   */\n  // eslint-disable-next-line complexity\n  async formTileFromNodePages(id: number) {\n    const node = await this.getNodeById(id);\n    const children: any[] = [];\n    for (const child of node.children || []) {\n      const childNode = await this.getNodeById(child);\n      children.push({\n        id: child,\n        obb: childNode.obb\n      });\n    }\n\n    let contentUrl = null;\n    let textureUrl: string | null = null;\n    let materialDefinition = null;\n    let textureFormat = 'jpeg';\n    let attributeUrls: string[] = [];\n    let isDracoGeometry = false;\n\n    if (node && node.mesh) {\n      // Get geometry resource URL and type (compressed / non-compressed)\n      const {url, isDracoGeometry: isDracoGeometryResult} = (node.mesh.geometry &&\n        this._getContentUrl(node.mesh.geometry)) || {url: null, isDracoGeometry: null};\n      contentUrl = url;\n      isDracoGeometry = isDracoGeometryResult;\n\n      const [textureData, nodeMaterialDefinition] = this._getInformationFromMaterial(\n        node.mesh.material\n      );\n      materialDefinition = nodeMaterialDefinition;\n      textureFormat = textureData.format || textureFormat;\n      if (textureData.name) {\n        textureUrl = `${this.tileset.url}/nodes/${node.mesh.material.resource}/textures/${textureData.name}`;\n      }\n\n      if (this.tileset.attributeStorageInfo) {\n        attributeUrls = generateTilesetAttributeUrls(this.tileset, node.mesh.attribute.resource);\n      }\n    }\n\n    const lodSelection = this._getLodSelection(node);\n\n    return normalizeTileNonUrlData({\n      id,\n      lodSelection,\n      obb: node.obb,\n      contentUrl,\n      textureUrl,\n      attributeUrls,\n      materialDefinition,\n      textureFormat,\n      children,\n      isDracoGeometry\n    });\n  }\n\n  /**\n   * Forms url and type of geometry resource by nodepage's data and `geometryDefinitions` in the tileset\n   * @param {Object} meshGeometryData - data about the node's mesh from the nodepage\n   * @returns {Object} -\n   *   {string} url - url to the geometry resource\n   *   {boolean} isDracoGeometry - whether the geometry resource contain DRACO compressed geometry\n   */\n  _getContentUrl(meshGeometryData) {\n    let result = {};\n    const geometryDefinition = this.tileset.geometryDefinitions[meshGeometryData.definition];\n    let geometryIndex = -1;\n    // Try to find DRACO geometryDefinition of `useDracoGeometry` option is set\n    if (this.options.i3s && this.options.i3s.useDracoGeometry) {\n      geometryIndex = geometryDefinition.geometryBuffers.findIndex(\n        (buffer) => buffer.compressedAttributes && buffer.compressedAttributes.encoding === 'draco'\n      );\n    }\n    // If DRACO geometry is not applicable try to select non-compressed geometry\n    if (geometryIndex === -1) {\n      geometryIndex = geometryDefinition.geometryBuffers.findIndex(\n        (buffer) => !buffer.compressedAttributes\n      );\n    }\n    if (geometryIndex !== -1) {\n      const isDracoGeometry = Boolean(\n        geometryDefinition.geometryBuffers[geometryIndex].compressedAttributes\n      );\n      result = {\n        url: `${this.tileset.url}/nodes/${meshGeometryData.resource}/geometries/${geometryIndex}`,\n        isDracoGeometry\n      };\n    }\n    return result;\n  }\n\n  /**\n   * Forms 1.6 compatible LOD selection object from a nodepage's node data\n   * @param {Object} node - a node from nodepage\n   * @returns {Object[]} - Array of object of following properties:\n   *   {string} metricType - the label of the LOD metric\n   *   {number} maxError - the value of the metric\n   */\n  _getLodSelection(node): object[] {\n    const lodSelection: object[] = [];\n    if (this.lodSelectionMetricType === 'maxScreenThresholdSQ') {\n      lodSelection.push({\n        metricType: 'maxScreenThreshold',\n        maxError: Math.sqrt(node.lodThreshold / (Math.PI * 0.25))\n      });\n    }\n    lodSelection.push({\n      metricType: this.lodSelectionMetricType,\n      maxError: node.lodThreshold\n    });\n    return lodSelection;\n  }\n\n  /**\n   * Returns information about texture and material from `materialDefinitions`\n   * @param {Object} material - material data from nodepage\n   * @returns {Object[]} - Couple [textureData, materialDefinition]\n   * {string} textureData.name - path name of the texture\n   * {string} textureData.format - format of the texture\n   * materialDefinition - PBR-like material definition from `materialDefinitions`\n   */\n  _getInformationFromMaterial(material) {\n    const textureDataDefault = {name: null, format: null};\n    if (material) {\n      const materialDefinition = this.tileset.materialDefinitions[material.definition];\n      const textureSetDefinitionIndex =\n        materialDefinition &&\n        materialDefinition.pbrMetallicRoughness &&\n        materialDefinition.pbrMetallicRoughness.baseColorTexture &&\n        materialDefinition.pbrMetallicRoughness.baseColorTexture.textureSetDefinitionId;\n      if (textureSetDefinitionIndex || textureSetDefinitionIndex === 0) {\n        const textureData =\n          this.textureDefinitionsSelectedFormats[textureSetDefinitionIndex] || textureDataDefault;\n        return [textureData, materialDefinition];\n      }\n      return [textureDataDefault, materialDefinition];\n    }\n    return [textureDataDefault, null];\n  }\n\n  /**\n   * Sets preferable and supported format for each textureDefinition of the tileset\n   * @param {Object} tileset - I3S layer data\n   * @returns {void}\n   */\n  _initSelectedFormatsForTextureDefinitions(tileset) {\n    this.textureDefinitionsSelectedFormats = [];\n    const possibleI3sFormats = this._getSupportedTextureFormats();\n    const textureSetDefinitions = tileset.textureSetDefinitions || [];\n    for (const textureSetDefinition of textureSetDefinitions) {\n      const formats = (textureSetDefinition && textureSetDefinition.formats) || [];\n      let selectedFormat = null;\n      for (const i3sFormat of possibleI3sFormats) {\n        const format = formats.find((value) => value.format === i3sFormat);\n        if (format) {\n          selectedFormat = format;\n          break;\n        }\n      }\n      this.textureDefinitionsSelectedFormats.push(selectedFormat);\n    }\n  }\n\n  /**\n   * Returns the array of supported texture format\n   * @returns list of format strings\n   */\n  _getSupportedTextureFormats(): string[] {\n    const formats: string[] = [];\n    if (!this.options.i3s || this.options.i3s.useCompressedTextures) {\n      const supportedCompressedFormats = getSupportedGPUTextureFormats();\n      // List of possible in i3s formats:\n      // https://github.com/Esri/i3s-spec/blob/master/docs/1.7/textureSetDefinitionFormat.cmn.md\n      if (supportedCompressedFormats.has('etc2')) {\n        formats.push('ktx-etc2');\n      }\n      if (supportedCompressedFormats.has('dxt')) {\n        formats.push('dds');\n      }\n    }\n\n    formats.push('jpg');\n    formats.push('png');\n    return formats;\n  }\n}\n"],"file":"i3s-nodepages-tiles.js"}