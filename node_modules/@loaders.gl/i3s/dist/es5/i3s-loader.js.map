{"version":3,"sources":["../../src/i3s-loader.ts"],"names":["VERSION","TILESET_REGEX","TILE_HEADER_REGEX","SLPK_HEX","I3SLoader","name","id","module","version","mimeTypes","parse","parseI3S","extensions","options","i3s","loadContent","token","isTileset","isTileHeader","tile","tileset","useDracoGeometry","useCompressedTextures","data","context","url","magicNumber","getMagicNumber","Error","test","parseTileset","parseTile","contentUrl","parseTileContent","arrayBuffer","I3SContentLoader","tilesetJson","JSON","TextDecoder","decode","loader","ArrayBuffer","Uint8Array","map","value","toString","padStart","join"],"mappings":"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","sourcesContent":["import type {LoaderWithParser} from '@loaders.gl/loader-utils';\nimport {load, parse} from '@loaders.gl/core';\nimport {I3SContentLoader} from './i3s-content-loader';\nimport {normalizeTileData, normalizeTilesetData} from './lib/parsers/parse-i3s';\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nconst TILESET_REGEX = /layers\\/[0-9]+$/;\nconst TILE_HEADER_REGEX = /nodes\\/([0-9-]+|root)$/;\nconst SLPK_HEX = '504b0304';\n\n/**\n * Loader for I3S - Indexed 3D Scene Layer\n */\nexport const I3SLoader: LoaderWithParser = {\n  name: 'I3S (Indexed Scene Layers)',\n  id: 'i3s',\n  module: 'i3s',\n  version: VERSION,\n  mimeTypes: ['application/octet-stream'],\n  parse: parseI3S,\n  extensions: ['bin'],\n  options: {\n    i3s: {\n      loadContent: true,\n      token: null,\n      isTileset: 'auto',\n      isTileHeader: 'auto',\n      tile: null,\n      tileset: null,\n      useDracoGeometry: true,\n      useCompressedTextures: true\n    }\n  }\n};\n\nasync function parseI3S(data, options, context) {\n  const url = context.url;\n  options.i3s = options.i3s || {};\n  const magicNumber = getMagicNumber(data);\n\n  // check if file is slpk\n  if (magicNumber === SLPK_HEX) {\n    throw new Error('Files with .slpk extention currently are not supported by I3SLoader');\n  }\n\n  // auto detect file type based on url\n  let isTileset;\n  if (options.i3s.isTileset === 'auto') {\n    isTileset = TILESET_REGEX.test(url);\n  } else {\n    isTileset = options.i3s.isTileset;\n  }\n\n  let isTileHeader;\n  if (options.isTileHeader === 'auto') {\n    isTileHeader = TILE_HEADER_REGEX.test(url);\n  } else {\n    isTileHeader = options.i3s.isTileHeader;\n  }\n\n  if (isTileset) {\n    data = await parseTileset(data, options, context);\n  } else if (isTileHeader) {\n    data = await parseTile(data, options, context);\n    if (options.i3s.loadContent) {\n      options.i3s.tile = data;\n      await load(data.contentUrl, I3SLoader, options);\n    }\n  } else {\n    data = await parseTileContent(data, options);\n  }\n\n  return data;\n}\n\nasync function parseTileContent(arrayBuffer, options) {\n  return await parse(arrayBuffer, I3SContentLoader, options);\n}\n\nasync function parseTileset(data, options, context) {\n  const tilesetJson = JSON.parse(new TextDecoder().decode(data));\n  // eslint-disable-next-line no-use-before-define\n  tilesetJson.loader = I3SLoader;\n  await normalizeTilesetData(tilesetJson, options, context);\n\n  return tilesetJson;\n}\n\nasync function parseTile(data, options, context) {\n  data = JSON.parse(new TextDecoder().decode(data));\n  return normalizeTileData(data, options, context);\n}\n\nfunction getMagicNumber(data) {\n  if (data instanceof ArrayBuffer) {\n    // slice binary data (4 bytes from the beginning) and transform it to hexadecimal numeral system\n    return [...new Uint8Array(data, 0, 4)]\n      .map((value) => value.toString(16).padStart(2, '0'))\n      .join('');\n  }\n  return null;\n}\n"],"file":"i3s-loader.js"}