{"version":3,"sources":["../../../../src/lib/parsers/basis-module-loader.ts"],"names":["loadBasisPromise","loadBasisModule","options","modules","basis","loadBasis","BASIS","wasmBinary","Promise","all","globalThis","initializeBasisModule","BasisModule","resolve","then","module","BasisFile","initializeBasis"],"mappings":";;;;;;;;;;;;;;;AAAA;;AAEA,IAAIA,gBAAJ;;SAEsBC,e;;;;;+EAAf,iBAA+BC,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,OADD,GACWD,OAAO,CAACC,OAAR,IAAmB,EAD9B;;AAAA,iBAEDA,OAAO,CAACC,KAFP;AAAA;AAAA;AAAA;;AAAA,6CAGID,OAAO,CAACC,KAHZ;;AAAA;AAMLJ,YAAAA,gBAAgB,GAAGA,gBAAgB,IAAIK,SAAS,CAACH,OAAD,CAAhD;AANK;AAAA,mBAOQF,gBAPR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAUQK,S;;;;;yEAAf,kBAAyBH,OAAzB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACMI,YAAAA,KADN,GACc,IADd;AAEMC,YAAAA,UAFN,GAEmB,IAFnB;AAAA,2BAI8BC,OAJ9B;AAAA;AAAA,mBAKU,8BAAY,qBAAZ,EAAmC,UAAnC,EAA+CN,OAA/C,CALV;;AAAA;AAAA;AAAA;AAAA,mBAMU,8BAAY,uBAAZ,EAAqC,UAArC,EAAiDA,OAAjD,CANV;;AAAA;AAAA;AAAA;AAAA;AAAA,gCAIsCO,GAJtC;;AAAA;AAAA;AAAA;AAIGH,YAAAA,KAJH;AAIUC,YAAAA,UAJV;AAWED,YAAAA,KAAK,GAAGA,KAAK,IAAII,UAAU,CAACJ,KAA5B;AAXF;AAAA,mBAYeK,qBAAqB,CAACL,KAAD,EAAQC,UAAR,CAZpC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAeA,SAASI,qBAAT,CAA+BC,WAA/B,EAA4CL,UAA5C,EAAwD;AACtD,MAAML,OAAsB,GAAG,EAA/B;;AAEA,MAAIK,UAAJ,EAAgB;AACdL,IAAAA,OAAO,CAACK,UAAR,GAAqBA,UAArB;AACD;;AAED,SAAO,IAAIC,OAAJ,CAAY,UAACK,OAAD,EAAa;AAE9BD,IAAAA,WAAW,CAACV,OAAD,CAAX,CAAqBY,IAArB,CAA0B,UAACC,MAAD,EAAY;AACpC,UAAOC,SAAP,GAAqCD,MAArC,CAAOC,SAAP;AAAA,UAAkBC,eAAlB,GAAqCF,MAArC,CAAkBE,eAAlB;AACAA,MAAAA,eAAe;AACfJ,MAAAA,OAAO,CAAC;AAACG,QAAAA,SAAS,EAATA;AAAD,OAAD,CAAP;AACD,KAJD;AAKD,GAPM,CAAP;AAQD","sourcesContent":["import {loadLibrary} from '@loaders.gl/worker-utils';\n\nlet loadBasisPromise;\n\nexport async function loadBasisModule(options) {\n  const modules = options.modules || {};\n  if (modules.basis) {\n    return modules.basis;\n  }\n\n  loadBasisPromise = loadBasisPromise || loadBasis(options);\n  return await loadBasisPromise;\n}\n\nasync function loadBasis(options) {\n  let BASIS = null;\n  let wasmBinary = null;\n\n  [BASIS, wasmBinary] = await Promise.all([\n    await loadLibrary('basis_transcoder.js', 'textures', options),\n    await loadLibrary('basis_transcoder.wasm', 'textures', options)\n  ]);\n\n  // Depends on how import happened...\n  // @ts-ignore TS2339: Property does not exist on type\n  BASIS = BASIS || globalThis.BASIS;\n  return await initializeBasisModule(BASIS, wasmBinary);\n}\n\nfunction initializeBasisModule(BasisModule, wasmBinary) {\n  const options: {wasmBinary?} = {};\n\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise((resolve) => {\n    // if you try to return BasisModule the browser crashes!\n    BasisModule(options).then((module) => {\n      const {BasisFile, initializeBasis} = module;\n      initializeBasis();\n      resolve({BasisFile});\n    });\n  });\n}\n"],"file":"basis-module-loader.js"}