{"version":3,"sources":["../../../../src/lib/parsers/parse-basis.js"],"names":["loadBasisModule","GL","OutputFormat","etc1","basisFormat","compressed","etc2","bc1","format","COMPRESSED_RGB_S3TC_DXT1_EXT","bc3","COMPRESSED_RGBA_S3TC_DXT5_EXT","bc4","bc5","rgba32","rgb565","bgr565","rgba4444","parseBasis","data","options","BasisFile","basisFile","Uint8Array","startTranscoding","imageCount","getNumImages","images","imageIndex","levelsCount","getNumLevels","levels","levelIndex","push","transcodeImage","close","delete","getBasisOptions","hasAlpha","basis","alpha","noAlpha","toLowerCase","width","getImageWidth","height","getImageHeight","getHasAlpha","decodedSize","getImageTranscodedSizeInBytes","decodedData"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,uBAA9B;AACA,SAAQC,EAAR,QAAiB,iBAAjB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AAACC,IAAAA,WAAW,EAAE,CAAd;AAAiBC,IAAAA,UAAU,EAAE;AAA7B,GADa;AAEnBC,EAAAA,IAAI,EAAE;AAACF,IAAAA,WAAW,EAAE,CAAd;AAAiBC,IAAAA,UAAU,EAAE;AAA7B,GAFa;AAGnBE,EAAAA,GAAG,EAAE;AAACH,IAAAA,WAAW,EAAE,CAAd;AAAiBC,IAAAA,UAAU,EAAE,IAA7B;AAAmCG,IAAAA,MAAM,EAAEP,EAAE,CAACQ;AAA9C,GAHc;AAInBC,EAAAA,GAAG,EAAE;AAACN,IAAAA,WAAW,EAAE,CAAd;AAAiBC,IAAAA,UAAU,EAAE,IAA7B;AAAmCG,IAAAA,MAAM,EAAEP,EAAE,CAACU;AAA9C,GAJc;AAKnBC,EAAAA,GAAG,EAAE;AAACR,IAAAA,WAAW,EAAE,CAAd;AAAiBC,IAAAA,UAAU,EAAE;AAA7B,GALc;AAMnBQ,EAAAA,GAAG,EAAE;AAACT,IAAAA,WAAW,EAAE,CAAd;AAAiBC,IAAAA,UAAU,EAAE;AAA7B,GANc;AAOnB,wBAAsB;AAACD,IAAAA,WAAW,EAAE,CAAd;AAAiBC,IAAAA,UAAU,EAAE;AAA7B,GAPH;AAQnB,YAAU;AAACD,IAAAA,WAAW,EAAE,CAAd;AAAiBC,IAAAA,UAAU,EAAE;AAA7B,GARS;AASnB,kBAAgB;AAACD,IAAAA,WAAW,EAAE,CAAd;AAAiBC,IAAAA,UAAU,EAAE;AAA7B,GATG;AAUnB,mBAAiB;AAACD,IAAAA,WAAW,EAAE,CAAd;AAAiBC,IAAAA,UAAU,EAAE;AAA7B,GAVE;AAWnB,cAAY;AAACD,IAAAA,WAAW,EAAE,EAAd;AAAkBC,IAAAA,UAAU,EAAE;AAA9B,GAXO;AAYnB,aAAW;AAACD,IAAAA,WAAW,EAAE,EAAd;AAAkBC,IAAAA,UAAU,EAAE;AAA9B,GAZQ;AAanB,iCAA+B;AAACD,IAAAA,WAAW,EAAE,EAAd;AAAkBC,IAAAA,UAAU,EAAE;AAA9B,GAbZ;AAcnBS,EAAAA,MAAM,EAAE;AAACV,IAAAA,WAAW,EAAE,EAAd;AAAkBC,IAAAA,UAAU,EAAE;AAA9B,GAdW;AAenBU,EAAAA,MAAM,EAAE;AAACX,IAAAA,WAAW,EAAE,EAAd;AAAkBC,IAAAA,UAAU,EAAE;AAA9B,GAfW;AAgBnBW,EAAAA,MAAM,EAAE;AAACZ,IAAAA,WAAW,EAAE,EAAd;AAAkBC,IAAAA,UAAU,EAAE;AAA9B,GAhBW;AAiBnBY,EAAAA,QAAQ,EAAE;AAACb,IAAAA,WAAW,EAAE,EAAd;AAAkBC,IAAAA,UAAU,EAAE;AAA9B;AAjBS,CAArB;AAoBA,eAAe,eAAea,UAAf,CAA0BC,IAA1B,EAAgCC,OAAhC,EAAyC;AACtD,QAAM;AAACC,IAAAA;AAAD,MAAc,MAAMrB,eAAe,CAACoB,OAAD,CAAzC;AACA,QAAME,SAAS,GAAG,IAAID,SAAJ,CAAc,IAAIE,UAAJ,CAAeJ,IAAf,CAAd,CAAlB;;AAEA,MAAI;AACF,QAAI,CAACG,SAAS,CAACE,gBAAV,EAAL,EAAmC;AACjC,aAAO,IAAP;AACD;;AAED,UAAMC,UAAU,GAAGH,SAAS,CAACI,YAAV,EAAnB;AACA,UAAMC,MAAM,GAAG,EAAf;;AAEA,SAAK,IAAIC,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGH,UAAtC,EAAkDG,UAAU,EAA5D,EAAgE;AAC9D,YAAMC,WAAW,GAAGP,SAAS,CAACQ,YAAV,CAAuBF,UAAvB,CAApB;AACA,YAAMG,MAAM,GAAG,EAAf;;AAEA,WAAK,IAAIC,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGH,WAAtC,EAAmDG,UAAU,EAA7D,EAAiE;AAC/DD,QAAAA,MAAM,CAACE,IAAP,CAAYC,cAAc,CAACZ,SAAD,EAAYM,UAAZ,EAAwBI,UAAxB,EAAoCZ,OAApC,CAA1B;AACD;;AAEDO,MAAAA,MAAM,CAACM,IAAP,CAAYF,MAAZ;AACD;;AAED,WAAOJ,MAAP;AACD,GApBD,SAoBU;AACRL,IAAAA,SAAS,CAACa,KAAV;AACAb,IAAAA,SAAS,CAACc,MAAV;AACD;AACF;;AAED,SAASC,eAAT,CAAyBjB,OAAzB,EAAkCkB,QAAlC,EAA4C;AAC1C,MAAI9B,MAAM,GAAGY,OAAO,IAAIA,OAAO,CAACmB,KAAnB,IAA4BnB,OAAO,CAACmB,KAAR,CAAc/B,MAAvD;;AACA,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9BA,IAAAA,MAAM,GAAG8B,QAAQ,GAAG9B,MAAM,CAACgC,KAAV,GAAkBhC,MAAM,CAACiC,OAA1C;AACD;;AAEDjC,EAAAA,MAAM,GAAGA,MAAM,CAACkC,WAAP,EAAT;AACA,SAAOxC,YAAY,CAACM,MAAD,CAAnB;AACD;;AAED,SAAS0B,cAAT,CAAwBZ,SAAxB,EAAmCM,UAAnC,EAA+CI,UAA/C,EAA2DZ,OAA3D,EAAoE;AAClE,QAAMuB,KAAK,GAAGrB,SAAS,CAACsB,aAAV,CAAwBhB,UAAxB,EAAoCI,UAApC,CAAd;AACA,QAAMa,MAAM,GAAGvB,SAAS,CAACwB,cAAV,CAAyBlB,UAAzB,EAAqCI,UAArC,CAAf;AAGA,QAAMM,QAAQ,GAAGhB,SAAS,CAACyB,WAAV,EAAjB;AAGA,QAAM;AAAC1C,IAAAA,UAAD;AAAaG,IAAAA,MAAb;AAAqBJ,IAAAA;AAArB,MAAoCiC,eAAe,CAACjB,OAAD,EAAUkB,QAAV,CAAzD;AAEA,QAAMU,WAAW,GAAG1B,SAAS,CAAC2B,6BAAV,CAAwCrB,UAAxC,EAAoDI,UAApD,EAAgE5B,WAAhE,CAApB;AACA,QAAM8C,WAAW,GAAG,IAAI3B,UAAJ,CAAeyB,WAAf,CAApB;;AAEA,MAAI,CAAC1B,SAAS,CAACY,cAAV,CAAyBgB,WAAzB,EAAsCtB,UAAtC,EAAkDI,UAAlD,EAA8D5B,WAA9D,EAA2E,CAA3E,EAA8E,CAA9E,CAAL,EAAuF;AACrF,WAAO,IAAP;AACD;;AAED,SAAO;AAELuC,IAAAA,KAFK;AAGLE,IAAAA,MAHK;AAIL1B,IAAAA,IAAI,EAAE+B,WAJD;AAKL7C,IAAAA,UALK;AASLiC,IAAAA,QATK;AAUL9B,IAAAA;AAVK,GAAP;AAYD","sourcesContent":["import {loadBasisModule} from './basis-module-loader';\nimport {GL} from '../gl-constants';\n\nconst OutputFormat = {\n  etc1: {basisFormat: 0, compressed: true},\n  etc2: {basisFormat: 1, compressed: true},\n  bc1: {basisFormat: 2, compressed: true, format: GL.COMPRESSED_RGB_S3TC_DXT1_EXT},\n  bc3: {basisFormat: 3, compressed: true, format: GL.COMPRESSED_RGBA_S3TC_DXT5_EXT},\n  bc4: {basisFormat: 4, compressed: true},\n  bc5: {basisFormat: 5, compressed: true},\n  'bc7-m6-opaque-only': {basisFormat: 6, compressed: true},\n  'bc7-m5': {basisFormat: 7, compressed: true},\n  'pvrtc1-4-rgb': {basisFormat: 8, compressed: true},\n  'pvrtc1-4-rgba': {basisFormat: 9, compressed: true},\n  'astc-4x4': {basisFormat: 10, compressed: true},\n  'atc-rgb': {basisFormat: 11, compressed: true},\n  'atc-rgba-interpolated-alpha': {basisFormat: 12, compressed: true},\n  rgba32: {basisFormat: 13, compressed: false},\n  rgb565: {basisFormat: 14, compressed: false},\n  bgr565: {basisFormat: 15, compressed: false},\n  rgba4444: {basisFormat: 16, compressed: false}\n};\n\nexport default async function parseBasis(data, options) {\n  const {BasisFile} = await loadBasisModule(options);\n  const basisFile = new BasisFile(new Uint8Array(data));\n\n  try {\n    if (!basisFile.startTranscoding()) {\n      return null;\n    }\n\n    const imageCount = basisFile.getNumImages();\n    const images = [];\n\n    for (let imageIndex = 0; imageIndex < imageCount; imageIndex++) {\n      const levelsCount = basisFile.getNumLevels(imageIndex);\n      const levels = [];\n\n      for (let levelIndex = 0; levelIndex < levelsCount; levelIndex++) {\n        levels.push(transcodeImage(basisFile, imageIndex, levelIndex, options));\n      }\n\n      images.push(levels);\n    }\n\n    return images;\n  } finally {\n    basisFile.close();\n    basisFile.delete();\n  }\n}\n\nfunction getBasisOptions(options, hasAlpha) {\n  let format = options && options.basis && options.basis.format;\n  if (typeof format === 'object') {\n    format = hasAlpha ? format.alpha : format.noAlpha;\n  }\n\n  format = format.toLowerCase();\n  return OutputFormat[format];\n}\n\nfunction transcodeImage(basisFile, imageIndex, levelIndex, options) {\n  const width = basisFile.getImageWidth(imageIndex, levelIndex);\n  const height = basisFile.getImageHeight(imageIndex, levelIndex);\n\n  // See https://github.com/BinomialLLC/basis_universal/pull/83\n  const hasAlpha = basisFile.getHasAlpha(/* imageIndex, levelIndex */);\n\n  // Check options for output format etc\n  const {compressed, format, basisFormat} = getBasisOptions(options, hasAlpha);\n\n  const decodedSize = basisFile.getImageTranscodedSizeInBytes(imageIndex, levelIndex, basisFormat);\n  const decodedData = new Uint8Array(decodedSize);\n\n  if (!basisFile.transcodeImage(decodedData, imageIndex, levelIndex, basisFormat, 0, 0)) {\n    return null;\n  }\n\n  return {\n    // standard loaders.gl image category payload\n    width,\n    height,\n    data: decodedData,\n    compressed,\n\n    // Additional fields\n    // Add levelSize field.\n    hasAlpha,\n    format\n  };\n}\n"],"file":"parse-basis.js"}