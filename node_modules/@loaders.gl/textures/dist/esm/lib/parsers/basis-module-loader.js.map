{"version":3,"sources":["../../../../src/lib/parsers/basis-module-loader.ts"],"names":["loadLibrary","loadBasisPromise","loadBasisModule","options","modules","basis","loadBasis","BASIS","wasmBinary","Promise","all","globalThis","initializeBasisModule","BasisModule","resolve","then","module","BasisFile","initializeBasis"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,0BAA1B;AAEA,IAAIC,gBAAJ;AAEA,OAAO,eAAeC,eAAf,CAA+BC,OAA/B,EAAwC;AAC7C,QAAMC,OAAO,GAAGD,OAAO,CAACC,OAAR,IAAmB,EAAnC;;AACA,MAAIA,OAAO,CAACC,KAAZ,EAAmB;AACjB,WAAOD,OAAO,CAACC,KAAf;AACD;;AAEDJ,EAAAA,gBAAgB,GAAGA,gBAAgB,IAAIK,SAAS,CAACH,OAAD,CAAhD;AACA,SAAO,MAAMF,gBAAb;AACD;;AAED,eAAeK,SAAf,CAAyBH,OAAzB,EAAkC;AAChC,MAAII,KAAK,GAAG,IAAZ;AACA,MAAIC,UAAU,GAAG,IAAjB;AAEA,GAACD,KAAD,EAAQC,UAAR,IAAsB,MAAMC,OAAO,CAACC,GAAR,CAAY,CACtC,MAAMV,WAAW,CAAC,qBAAD,EAAwB,UAAxB,EAAoCG,OAApC,CADqB,EAEtC,MAAMH,WAAW,CAAC,uBAAD,EAA0B,UAA1B,EAAsCG,OAAtC,CAFqB,CAAZ,CAA5B;AAOAI,EAAAA,KAAK,GAAGA,KAAK,IAAII,UAAU,CAACJ,KAA5B;AACA,SAAO,MAAMK,qBAAqB,CAACL,KAAD,EAAQC,UAAR,CAAlC;AACD;;AAED,SAASI,qBAAT,CAA+BC,WAA/B,EAA4CL,UAA5C,EAAwD;AACtD,QAAML,OAAsB,GAAG,EAA/B;;AAEA,MAAIK,UAAJ,EAAgB;AACdL,IAAAA,OAAO,CAACK,UAAR,GAAqBA,UAArB;AACD;;AAED,SAAO,IAAIC,OAAJ,CAAaK,OAAD,IAAa;AAE9BD,IAAAA,WAAW,CAACV,OAAD,CAAX,CAAqBY,IAArB,CAA2BC,MAAD,IAAY;AACpC,YAAM;AAACC,QAAAA,SAAD;AAAYC,QAAAA;AAAZ,UAA+BF,MAArC;AACAE,MAAAA,eAAe;AACfJ,MAAAA,OAAO,CAAC;AAACG,QAAAA;AAAD,OAAD,CAAP;AACD,KAJD;AAKD,GAPM,CAAP;AAQD","sourcesContent":["import {loadLibrary} from '@loaders.gl/worker-utils';\n\nlet loadBasisPromise;\n\nexport async function loadBasisModule(options) {\n  const modules = options.modules || {};\n  if (modules.basis) {\n    return modules.basis;\n  }\n\n  loadBasisPromise = loadBasisPromise || loadBasis(options);\n  return await loadBasisPromise;\n}\n\nasync function loadBasis(options) {\n  let BASIS = null;\n  let wasmBinary = null;\n\n  [BASIS, wasmBinary] = await Promise.all([\n    await loadLibrary('basis_transcoder.js', 'textures', options),\n    await loadLibrary('basis_transcoder.wasm', 'textures', options)\n  ]);\n\n  // Depends on how import happened...\n  // @ts-ignore TS2339: Property does not exist on type\n  BASIS = BASIS || globalThis.BASIS;\n  return await initializeBasisModule(BASIS, wasmBinary);\n}\n\nfunction initializeBasisModule(BasisModule, wasmBinary) {\n  const options: {wasmBinary?} = {};\n\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise((resolve) => {\n    // if you try to return BasisModule the browser crashes!\n    BasisModule(options).then((module) => {\n      const {BasisFile, initializeBasis} = module;\n      initializeBasis();\n      resolve({BasisFile});\n    });\n  });\n}\n"],"file":"basis-module-loader.js"}